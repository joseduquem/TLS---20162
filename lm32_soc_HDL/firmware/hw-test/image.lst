
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000978  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000060  00000978  00000978  000009cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  000009d8  000009d8  00000a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000009e8  000009e8  00000a3c  2**2
                  ALLOC
  4 .debug_abbrev 00000288  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071a  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000893  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00001c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000257  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001d5  00000000  00000000  0000207b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000060  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000268  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 0d 	calli 500 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 f0 	ori gp,gp,0x9f0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 e8 	ori r1,r1,0x9e8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0a 6c 	ori r3,r3,0xa6c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
 * 
 */

#include "soc-hw.h"

int  main(){
 208:	37 9c ff c4 	addi sp,sp,-60
 20c:	5b 8b 00 3c 	sw (sp+60),r11
 210:	5b 8c 00 38 	sw (sp+56),r12
 214:	5b 8d 00 34 	sw (sp+52),r13
 218:	5b 8e 00 30 	sw (sp+48),r14
 21c:	5b 8f 00 2c 	sw (sp+44),r15
 220:	5b 90 00 28 	sw (sp+40),r16
 224:	5b 91 00 24 	sw (sp+36),r17
 228:	5b 92 00 20 	sw (sp+32),r18
 22c:	5b 93 00 1c 	sw (sp+28),r19
 230:	5b 94 00 18 	sw (sp+24),r20
 234:	5b 95 00 14 	sw (sp+20),r21
 238:	5b 96 00 10 	sw (sp+16),r22
 23c:	5b 97 00 0c 	sw (sp+12),r23
 240:	5b 98 00 08 	sw (sp+8),r24
 244:	5b 9d 00 04 	sw (sp+4),ra
		uart_putchar(c);
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
 248:	34 18 00 50 	mvi r24,80
 */

#include "soc-hw.h"

int  main(){
	isr_init();
 24c:	f8 00 00 c6 	calli 564 <isr_init>
		uart_putchar(0);
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
			wifi_putchar(0x61);//a
		}
		
		if(((c<=80))&((d>=80))&((j<=79))&((k<=80))){
 250:	34 17 00 4f 	mvi r23,79

#include "soc-hw.h"

int  main(){
	isr_init();
	tic_init();
 254:	f8 00 00 f6 	calli 62c <tic_init>
	irq_enable();
 258:	fb ff ff ba 	calli 140 <irq_enable>
	
	init_wifi();
 25c:	f8 00 01 45 	calli 770 <init_wifi>
 260:	e0 00 00 2d 	bi 314 <main+0x10c>
		uart_putchar(0);
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
			wifi_putchar(0x61);//a
		}
		
		if(((c<=80))&((d>=80))&((j<=79))&((k<=80))){
 264:	f3 10 80 00 	cmpgeu r16,r24,r16
 268:	f2 ed 68 00 	cmpgeu r13,r23,r13
 26c:	a2 11 88 00 	and r17,r16,r17
 270:	a2 2d 98 00 	and r19,r17,r13
 274:	a2 6c 08 00 	and r1,r19,r12
 278:	5c 20 00 51 	bne r1,r0,3bc <main+0x1b4>
			wifi_putchar(0x63);//c
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k<=80))){
 27c:	a2 2e 88 00 	and r17,r17,r14
 280:	a2 2c 08 00 	and r1,r17,r12
 284:	5c 20 00 53 	bne r1,r0,3d0 <main+0x1c8>
			wifi_putchar(0x64);//d
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k<=80))){
 288:	f2 ef 78 00 	cmpgeu r15,r23,r15
 28c:	a1 f0 80 00 	and r16,r15,r16
 290:	a2 0d a0 00 	and r20,r16,r13
 294:	a2 8c 08 00 	and r1,r20,r12
 298:	5c 20 00 55 	bne r1,r0,3ec <main+0x1e4>
			wifi_putchar(0x65);//e
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k<=80))){
 29c:	a1 f5 78 00 	and r15,r15,r21
 2a0:	a1 ee a8 00 	and r21,r15,r14
 2a4:	a2 ac 08 00 	and r1,r21,r12
 2a8:	5c 20 00 57 	bne r1,r0,404 <main+0x1fc>
			wifi_putchar(0x66);//f
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k<=80))){
 2ac:	a2 0e 70 00 	and r14,r16,r14
 2b0:	a1 cc 08 00 	and r1,r14,r12
 2b4:	5c 20 00 59 	bne r1,r0,418 <main+0x210>
			wifi_putchar(0x67);//g
		}
		if(((c>=81))&((d>=80))&((j<=79))&((k>=81))){
 2b8:	75 6b 00 50 	cmpgui r11,r11,0x50
 2bc:	a2 cd 80 00 	and r16,r22,r13
 2c0:	a2 0b 08 00 	and r1,r16,r11
 2c4:	5c 20 00 5b 	bne r1,r0,430 <main+0x228>
			wifi_putchar(0x69);//i
		}		
		if(((c>=81))&((d>=80))&((j<=79))&((k<=80))){
 2c8:	a2 0c 80 00 	and r16,r16,r12
 2cc:	5e 00 00 5d 	bne r16,r0,440 <main+0x238>
			wifi_putchar(0x6A);//j
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k>=81))){
 2d0:	a2 ab a8 00 	and r21,r21,r11
 2d4:	5e a0 00 5f 	bne r21,r0,450 <main+0x248>
			wifi_putchar(0x6C);//l
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k>=81))){
 2d8:	a2 8b a0 00 	and r20,r20,r11
 2dc:	5e 80 00 61 	bne r20,r0,460 <main+0x258>
			wifi_putchar(0x6D);//m
		}
		if(((c<=80))&((d>=80))&((j<=79))&((k>=81))){
 2e0:	a2 6b 98 00 	and r19,r19,r11
 2e4:	5e 60 00 63 	bne r19,r0,470 <main+0x268>
			wifi_putchar(0x6E);//n
		}
		if(((c>=81))&((d>=80))&((j>=80))&((k>=81))){
 2e8:	a2 4b 90 00 	and r18,r18,r11
 2ec:	5e 40 00 65 	bne r18,r0,480 <main+0x278>
			wifi_putchar(0x6F);//o
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k>=81))){
 2f0:	a1 cb 70 00 	and r14,r14,r11
 2f4:	5d c0 00 67 	bne r14,r0,490 <main+0x288>
			wifi_putchar(0x70);//p
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k>=81))){
 2f8:	a2 2b 88 00 	and r17,r17,r11
 2fc:	5e 20 00 69 	bne r17,r0,4a0 <main+0x298>
			wifi_putchar(0x73);//s
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k<=80))){
 300:	a1 ed 68 00 	and r13,r15,r13
 304:	a1 ac 60 00 	and r12,r13,r12
 308:	5d 80 00 6b 	bne r12,r0,4b4 <main+0x2ac>
			wifi_putchar(0x74);//t
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k>=81))){
 30c:	a1 ab 68 00 	and r13,r13,r11
 310:	5d a0 00 6d 	bne r13,r0,4c4 <main+0x2bc>
	char j; //índice
	char k; //pulgar
	int e;
	e=0;	
	do{	
		ReadChanel(0x00);	
 314:	34 01 00 00 	mvi r1,0
 318:	f8 00 01 65 	calli 8ac <ReadChanel>
		c=GetByteOne();
 31c:	f8 00 01 8b 	calli 948 <GetByteOne>
 320:	b8 20 80 00 	mv r16,r1
		ReadChanel(0x01);
 324:	34 01 00 01 	mvi r1,1
 328:	f8 00 01 61 	calli 8ac <ReadChanel>
		d=GetByteOne();
 32c:	f8 00 01 87 	calli 948 <GetByteOne>
 330:	b8 20 78 00 	mv r15,r1
		ReadChanel(0x02);
 334:	34 01 00 02 	mvi r1,2
 338:	f8 00 01 5d 	calli 8ac <ReadChanel>
		j=GetByteOne();
 33c:	f8 00 01 83 	calli 948 <GetByteOne>
 340:	b8 20 68 00 	mv r13,r1
		ReadChanel(0x03);
 344:	34 01 00 03 	mvi r1,3
 348:	f8 00 01 59 	calli 8ac <ReadChanel>
		k=GetByteOne();
 34c:	f8 00 01 7f 	calli 948 <GetByteOne>
 350:	b8 20 58 00 	mv r11,r1
		uart_putchar(c);
 354:	ba 00 08 00 	mv r1,r16
 358:	f8 00 00 d0 	calli 698 <uart_putchar>
		uart_putchar(d);
 35c:	b9 e0 08 00 	mv r1,r15
 360:	f8 00 00 ce 	calli 698 <uart_putchar>
		uart_putchar(j);
 364:	b9 a0 08 00 	mv r1,r13
 368:	f8 00 00 cc 	calli 698 <uart_putchar>
		uart_putchar(k);
 36c:	b9 60 08 00 	mv r1,r11
		uart_putchar(0);
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
 370:	76 15 00 50 	cmpgui r21,r16,0x50
 374:	75 f1 00 4f 	cmpgui r17,r15,0x4f
		ReadChanel(0x03);
		k=GetByteOne();
		uart_putchar(c);
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
 378:	f8 00 00 c8 	calli 698 <uart_putchar>
		uart_putchar(0);
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
 37c:	75 ae 00 4f 	cmpgui r14,r13,0x4f
		k=GetByteOne();
		uart_putchar(c);
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
 380:	34 01 00 00 	mvi r1,0
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
 384:	a2 35 b0 00 	and r22,r17,r21
 388:	f3 0b 60 00 	cmpgeu r12,r24,r11
 38c:	a2 ce 90 00 	and r18,r22,r14
		k=GetByteOne();
		uart_putchar(c);
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
 390:	f8 00 00 c2 	calli 698 <uart_putchar>
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
 394:	a2 4c 08 00 	and r1,r18,r12
 398:	44 20 ff b3 	be r1,r0,264 <main+0x5c>
			wifi_putchar(0x61);//a
		}
		
		if(((c<=80))&((d>=80))&((j<=79))&((k<=80))){
 39c:	f3 10 80 00 	cmpgeu r16,r24,r16
 3a0:	f2 ed 68 00 	cmpgeu r13,r23,r13
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
			wifi_putchar(0x61);//a
 3a4:	34 01 00 61 	mvi r1,97
		}
		
		if(((c<=80))&((d>=80))&((j<=79))&((k<=80))){
 3a8:	a2 11 88 00 	and r17,r16,r17
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
		if(((c>=81))&((d>=80))&((j>=80))&((k<=80))){
			wifi_putchar(0x61);//a
 3ac:	f8 00 01 0f 	calli 7e8 <wifi_putchar>
		}
		
		if(((c<=80))&((d>=80))&((j<=79))&((k<=80))){
 3b0:	a2 2d 98 00 	and r19,r17,r13
 3b4:	a2 6c 08 00 	and r1,r19,r12
 3b8:	44 20 ff b1 	be r1,r0,27c <main+0x74>
			wifi_putchar(0x63);//c
 3bc:	34 01 00 63 	mvi r1,99
 3c0:	f8 00 01 0a 	calli 7e8 <wifi_putchar>
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k<=80))){
 3c4:	a2 2e 88 00 	and r17,r17,r14
 3c8:	a2 2c 08 00 	and r1,r17,r12
 3cc:	44 20 ff af 	be r1,r0,288 <main+0x80>
			wifi_putchar(0x64);//d
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k<=80))){
 3d0:	f2 ef 78 00 	cmpgeu r15,r23,r15
		
		if(((c<=80))&((d>=80))&((j<=79))&((k<=80))){
			wifi_putchar(0x63);//c
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k<=80))){
			wifi_putchar(0x64);//d
 3d4:	34 01 00 64 	mvi r1,100
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k<=80))){
 3d8:	a1 f0 80 00 	and r16,r15,r16
		
		if(((c<=80))&((d>=80))&((j<=79))&((k<=80))){
			wifi_putchar(0x63);//c
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k<=80))){
			wifi_putchar(0x64);//d
 3dc:	f8 00 01 03 	calli 7e8 <wifi_putchar>
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k<=80))){
 3e0:	a2 0d a0 00 	and r20,r16,r13
 3e4:	a2 8c 08 00 	and r1,r20,r12
 3e8:	44 20 ff ad 	be r1,r0,29c <main+0x94>
			wifi_putchar(0x65);//e
 3ec:	34 01 00 65 	mvi r1,101
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k<=80))){
 3f0:	a1 f5 78 00 	and r15,r15,r21
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k<=80))){
			wifi_putchar(0x64);//d
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k<=80))){
			wifi_putchar(0x65);//e
 3f4:	f8 00 00 fd 	calli 7e8 <wifi_putchar>
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k<=80))){
 3f8:	a1 ee a8 00 	and r21,r15,r14
 3fc:	a2 ac 08 00 	and r1,r21,r12
 400:	44 20 ff ab 	be r1,r0,2ac <main+0xa4>
			wifi_putchar(0x66);//f
 404:	34 01 00 66 	mvi r1,102
 408:	f8 00 00 f8 	calli 7e8 <wifi_putchar>
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k<=80))){
 40c:	a2 0e 70 00 	and r14,r16,r14
 410:	a1 cc 08 00 	and r1,r14,r12
 414:	44 20 ff a9 	be r1,r0,2b8 <main+0xb0>
			wifi_putchar(0x67);//g
 418:	34 01 00 67 	mvi r1,103
		}
		if(((c>=81))&((d>=80))&((j<=79))&((k>=81))){
 41c:	75 6b 00 50 	cmpgui r11,r11,0x50
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k<=80))){
			wifi_putchar(0x66);//f
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k<=80))){
			wifi_putchar(0x67);//g
 420:	f8 00 00 f2 	calli 7e8 <wifi_putchar>
		}
		if(((c>=81))&((d>=80))&((j<=79))&((k>=81))){
 424:	a2 cd 80 00 	and r16,r22,r13
 428:	a2 0b 08 00 	and r1,r16,r11
 42c:	44 20 ff a7 	be r1,r0,2c8 <main+0xc0>
			wifi_putchar(0x69);//i
 430:	34 01 00 69 	mvi r1,105
		}		
		if(((c>=81))&((d>=80))&((j<=79))&((k<=80))){
 434:	a2 0c 80 00 	and r16,r16,r12
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k<=80))){
			wifi_putchar(0x67);//g
		}
		if(((c>=81))&((d>=80))&((j<=79))&((k>=81))){
			wifi_putchar(0x69);//i
 438:	f8 00 00 ec 	calli 7e8 <wifi_putchar>
		}		
		if(((c>=81))&((d>=80))&((j<=79))&((k<=80))){
 43c:	46 00 ff a5 	be r16,r0,2d0 <main+0xc8>
			wifi_putchar(0x6A);//j
 440:	34 01 00 6a 	mvi r1,106
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k>=81))){
 444:	a2 ab a8 00 	and r21,r21,r11
		}
		if(((c>=81))&((d>=80))&((j<=79))&((k>=81))){
			wifi_putchar(0x69);//i
		}		
		if(((c>=81))&((d>=80))&((j<=79))&((k<=80))){
			wifi_putchar(0x6A);//j
 448:	f8 00 00 e8 	calli 7e8 <wifi_putchar>
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k>=81))){
 44c:	46 a0 ff a3 	be r21,r0,2d8 <main+0xd0>
			wifi_putchar(0x6C);//l
 450:	34 01 00 6c 	mvi r1,108
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k>=81))){
 454:	a2 8b a0 00 	and r20,r20,r11
		}		
		if(((c>=81))&((d>=80))&((j<=79))&((k<=80))){
			wifi_putchar(0x6A);//j
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k>=81))){
			wifi_putchar(0x6C);//l
 458:	f8 00 00 e4 	calli 7e8 <wifi_putchar>
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k>=81))){
 45c:	46 80 ff a1 	be r20,r0,2e0 <main+0xd8>
			wifi_putchar(0x6D);//m
 460:	34 01 00 6d 	mvi r1,109
		}
		if(((c<=80))&((d>=80))&((j<=79))&((k>=81))){
 464:	a2 6b 98 00 	and r19,r19,r11
		}
		if(((c>=81))&((d<=79))&((j>=80))&((k>=81))){
			wifi_putchar(0x6C);//l
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k>=81))){
			wifi_putchar(0x6D);//m
 468:	f8 00 00 e0 	calli 7e8 <wifi_putchar>
		}
		if(((c<=80))&((d>=80))&((j<=79))&((k>=81))){
 46c:	46 60 ff 9f 	be r19,r0,2e8 <main+0xe0>
			wifi_putchar(0x6E);//n
 470:	34 01 00 6e 	mvi r1,110
		}
		if(((c>=81))&((d>=80))&((j>=80))&((k>=81))){
 474:	a2 4b 90 00 	and r18,r18,r11
		}
		if(((c<=80))&((d<=79))&((j<=79))&((k>=81))){
			wifi_putchar(0x6D);//m
		}
		if(((c<=80))&((d>=80))&((j<=79))&((k>=81))){
			wifi_putchar(0x6E);//n
 478:	f8 00 00 dc 	calli 7e8 <wifi_putchar>
		}
		if(((c>=81))&((d>=80))&((j>=80))&((k>=81))){
 47c:	46 40 ff 9d 	be r18,r0,2f0 <main+0xe8>
			wifi_putchar(0x6F);//o
 480:	34 01 00 6f 	mvi r1,111
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k>=81))){
 484:	a1 cb 70 00 	and r14,r14,r11
		}
		if(((c<=80))&((d>=80))&((j<=79))&((k>=81))){
			wifi_putchar(0x6E);//n
		}
		if(((c>=81))&((d>=80))&((j>=80))&((k>=81))){
			wifi_putchar(0x6F);//o
 488:	f8 00 00 d8 	calli 7e8 <wifi_putchar>
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k>=81))){
 48c:	45 c0 ff 9b 	be r14,r0,2f8 <main+0xf0>
			wifi_putchar(0x70);//p
 490:	34 01 00 70 	mvi r1,112
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k>=81))){
 494:	a2 2b 88 00 	and r17,r17,r11
		}
		if(((c>=81))&((d>=80))&((j>=80))&((k>=81))){
			wifi_putchar(0x6F);//o
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k>=81))){
			wifi_putchar(0x70);//p
 498:	f8 00 00 d4 	calli 7e8 <wifi_putchar>
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k>=81))){
 49c:	46 20 ff 99 	be r17,r0,300 <main+0xf8>
			wifi_putchar(0x73);//s
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k<=80))){
 4a0:	a1 ed 68 00 	and r13,r15,r13
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k>=81))){
			wifi_putchar(0x70);//p
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k>=81))){
			wifi_putchar(0x73);//s
 4a4:	34 01 00 73 	mvi r1,115
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k<=80))){
 4a8:	a1 ac 60 00 	and r12,r13,r12
		}
		if(((c<=80))&((d<=79))&((j>=80))&((k>=81))){
			wifi_putchar(0x70);//p
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k>=81))){
			wifi_putchar(0x73);//s
 4ac:	f8 00 00 cf 	calli 7e8 <wifi_putchar>
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k<=80))){
 4b0:	45 80 ff 97 	be r12,r0,30c <main+0x104>
			wifi_putchar(0x74);//t
 4b4:	34 01 00 74 	mvi r1,116
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k>=81))){
 4b8:	a1 ab 68 00 	and r13,r13,r11
		}
		if(((c<=80))&((d>=80))&((j>=80))&((k>=81))){
			wifi_putchar(0x73);//s
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k<=80))){
			wifi_putchar(0x74);//t
 4bc:	f8 00 00 cb 	calli 7e8 <wifi_putchar>
		}
		if(((c>=81))&((d<=79))&((j<=79))&((k>=81))){
 4c0:	45 a0 ff 95 	be r13,r0,314 <main+0x10c>
			wifi_putchar(0x75);//u
 4c4:	34 01 00 75 	mvi r1,117
 4c8:	f8 00 00 c8 	calli 7e8 <wifi_putchar>
 4cc:	e3 ff ff 92 	bi 314 <main+0x10c>

000004d0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 4d0:	c3 a0 00 00 	ret

000004d4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4d4:	78 01 00 00 	mvhi r1,0x0
 4d8:	38 21 0a 68 	ori r1,r1,0xa68
 4dc:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4e0:	78 02 00 00 	mvhi r2,0x0
 4e4:	38 42 09 e0 	ori r2,r2,0x9e0
 4e8:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4ec:	34 63 00 01 	addi r3,r3,1
 4f0:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4f4:	34 01 00 0e 	mvi r1,14
 4f8:	58 41 00 00 	sw (r2+0),r1
}
 4fc:	c3 a0 00 00 	ret

00000500 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 500:	37 9c ff f0 	addi sp,sp,-16
 504:	5b 8b 00 10 	sw (sp+16),r11
 508:	5b 8c 00 0c 	sw (sp+12),r12
 50c:	5b 8d 00 08 	sw (sp+8),r13
 510:	5b 9d 00 04 	sw (sp+4),ra
 514:	78 0b 00 00 	mvhi r11,0x0
 518:	39 6b 09 e8 	ori r11,r11,0x9e8
 51c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 520:	35 6d 00 80 	addi r13,r11,128
 524:	e0 00 00 04 	bi 534 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 528:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 52c:	45 6d 00 08 	be r11,r13,54c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 530:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 534:	21 81 00 01 	andi r1,r12,0x1
 538:	44 20 ff fc 	be r1,r0,528 <irq_handler+0x28>
 53c:	29 61 00 00 	lw r1,(r11+0)
 540:	35 6b 00 04 	addi r11,r11,4
 544:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 548:	5d 6d ff fa 	bne r11,r13,530 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 54c:	2b 9d 00 04 	lw ra,(sp+4)
 550:	2b 8b 00 10 	lw r11,(sp+16)
 554:	2b 8c 00 0c 	lw r12,(sp+12)
 558:	2b 8d 00 08 	lw r13,(sp+8)
 55c:	37 9c 00 10 	addi sp,sp,16
 560:	c3 a0 00 00 	ret

00000564 <isr_init>:

void isr_init()
{
 564:	78 01 00 00 	mvhi r1,0x0
 568:	78 02 00 00 	mvhi r2,0x0
 56c:	38 21 09 e8 	ori r1,r1,0x9e8
 570:	38 42 04 d0 	ori r2,r2,0x4d0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 574:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 578:	58 22 00 00 	sw (r1+0),r2
 57c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 580:	5c 23 ff fe 	bne r1,r3,578 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 584:	c3 a0 00 00 	ret

00000588 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 588:	78 03 00 00 	mvhi r3,0x0
 58c:	3c 21 00 02 	sli r1,r1,2
 590:	38 63 09 e8 	ori r3,r3,0x9e8
 594:	b4 61 18 00 	add r3,r3,r1
 598:	58 62 00 00 	sw (r3+0),r2
}
 59c:	c3 a0 00 00 	ret

000005a0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 5a0:	78 03 00 00 	mvhi r3,0x0
 5a4:	3c 21 00 02 	sli r1,r1,2
 5a8:	38 63 09 e8 	ori r3,r3,0x9e8
 5ac:	78 02 00 00 	mvhi r2,0x0
 5b0:	b4 61 18 00 	add r3,r3,r1
 5b4:	38 42 04 d0 	ori r2,r2,0x4d0
 5b8:	58 62 00 00 	sw (r3+0),r2
}
 5bc:	c3 a0 00 00 	ret

000005c0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 5c0:	78 04 00 00 	mvhi r4,0x0
 5c4:	38 84 09 78 	ori r4,r4,0x978
 5c8:	28 83 00 00 	lw r3,(r4+0)
 5cc:	78 02 00 00 	mvhi r2,0x0
 5d0:	38 42 09 e0 	ori r2,r2,0x9e0
 5d4:	28 42 00 00 	lw r2,(r2+0)
 5d8:	88 23 08 00 	mul r1,r1,r3
 5dc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 5e0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 5e4:	34 01 00 08 	mvi r1,8
 5e8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 5ec:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 5f0:	20 21 00 01 	andi r1,r1,0x1
 5f4:	44 20 ff fe 	be r1,r0,5ec <msleep+0x2c>
}
 5f8:	c3 a0 00 00 	ret

000005fc <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 5fc:	78 02 00 00 	mvhi r2,0x0
 600:	38 42 09 e0 	ori r2,r2,0x9e0
 604:	28 42 00 00 	lw r2,(r2+0)
 608:	08 21 00 64 	muli r1,r1,100
 60c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 610:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 614:	34 01 00 08 	mvi r1,8
 618:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 61c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 620:	20 21 00 01 	andi r1,r1,0x1
 624:	44 20 ff fe 	be r1,r0,61c <nsleep+0x20>
}
 628:	c3 a0 00 00 	ret

0000062c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 62c:	78 01 00 00 	mvhi r1,0x0
 630:	38 21 09 e0 	ori r1,r1,0x9e0
 634:	28 23 00 00 	lw r3,(r1+0)
 638:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 63c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 640:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 644:	38 21 0a 68 	ori r1,r1,0xa68

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 648:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 64c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 650:	78 02 00 00 	mvhi r2,0x0
 654:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 658:	34 04 00 0e 	mvi r4,14
 65c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 660:	38 21 09 e8 	ori r1,r1,0x9e8
 664:	38 42 04 d4 	ori r2,r2,0x4d4
 668:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 66c:	c3 a0 00 00 	ret

00000670 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 670:	c3 a0 00 00 	ret

00000674 <uart_getchar>:

char uart_getchar()
{   
 674:	78 01 00 00 	mvhi r1,0x0
 678:	38 21 09 d8 	ori r1,r1,0x9d8
 67c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 680:	28 41 00 00 	lw r1,(r2+0)
 684:	20 21 00 01 	andi r1,r1,0x1
 688:	44 20 ff fe 	be r1,r0,680 <uart_getchar+0xc>
	return uart0->rxtx;
 68c:	28 41 00 04 	lw r1,(r2+4)
}
 690:	20 21 00 ff 	andi r1,r1,0xff
 694:	c3 a0 00 00 	ret

00000698 <uart_putchar>:

void uart_putchar(char c)
{
 698:	78 02 00 00 	mvhi r2,0x0
 69c:	38 42 09 d8 	ori r2,r2,0x9d8
 6a0:	28 43 00 00 	lw r3,(r2+0)
 6a4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 6a8:	28 62 00 00 	lw r2,(r3+0)
 6ac:	20 42 00 10 	andi r2,r2,0x10
 6b0:	5c 40 ff fe 	bne r2,r0,6a8 <uart_putchar+0x10>
	uart0->rxtx = c;
 6b4:	58 61 00 04 	sw (r3+4),r1
}
 6b8:	c3 a0 00 00 	ret

000006bc <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6bc:	40 24 00 00 	lbu r4,(r1+0)
 6c0:	44 80 00 0b 	be r4,r0,6ec <uart_putstr+0x30>
 6c4:	78 02 00 00 	mvhi r2,0x0
 6c8:	38 42 09 d8 	ori r2,r2,0x9d8
 6cc:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6d0:	28 62 00 00 	lw r2,(r3+0)
 6d4:	20 42 00 10 	andi r2,r2,0x10
 6d8:	5c 40 ff fe 	bne r2,r0,6d0 <uart_putstr+0x14>
	uart0->rxtx = c;
 6dc:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 6e0:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6e4:	40 24 00 00 	lbu r4,(r1+0)
 6e8:	5c 82 ff fa 	bne r4,r2,6d0 <uart_putstr+0x14>
 6ec:	c3 a0 00 00 	ret

000006f0 <uart_init1>:
	//uart1->lcr = 0x03;  // Line Control Register:    8N1
	//uart1->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart1->div = (FCPU/(57600*16));
}
 6f0:	c3 a0 00 00 	ret

000006f4 <uart_getchar1>:

char uart_getchar1()
{   
 6f4:	78 01 00 00 	mvhi r1,0x0
 6f8:	38 21 09 dc 	ori r1,r1,0x9dc
 6fc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 700:	28 41 00 00 	lw r1,(r2+0)
 704:	20 21 00 01 	andi r1,r1,0x1
 708:	44 20 ff fe 	be r1,r0,700 <uart_getchar1+0xc>
	return uart1->rxtx;
 70c:	28 41 00 04 	lw r1,(r2+4)
}
 710:	20 21 00 ff 	andi r1,r1,0xff
 714:	c3 a0 00 00 	ret

00000718 <uart_putchar1>:

void uart_putchar1(char c)
{
 718:	78 02 00 00 	mvhi r2,0x0
 71c:	38 42 09 dc 	ori r2,r2,0x9dc
 720:	28 43 00 00 	lw r3,(r2+0)
 724:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 728:	28 62 00 00 	lw r2,(r3+0)
 72c:	20 42 00 10 	andi r2,r2,0x10
 730:	5c 40 ff fe 	bne r2,r0,728 <uart_putchar1+0x10>
	uart1->rxtx = c;
 734:	58 61 00 04 	sw (r3+4),r1
}
 738:	c3 a0 00 00 	ret

0000073c <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 73c:	40 24 00 00 	lbu r4,(r1+0)
 740:	44 80 00 0b 	be r4,r0,76c <uart_putstr1+0x30>
 744:	78 02 00 00 	mvhi r2,0x0
 748:	38 42 09 dc 	ori r2,r2,0x9dc
 74c:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 750:	28 62 00 00 	lw r2,(r3+0)
 754:	20 42 00 10 	andi r2,r2,0x10
 758:	5c 40 ff fe 	bne r2,r0,750 <uart_putstr1+0x14>
	uart1->rxtx = c;
 75c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 760:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 764:	40 24 00 00 	lbu r4,(r1+0)
 768:	5c 82 ff fa 	bne r4,r2,750 <uart_putstr1+0x14>
 76c:	c3 a0 00 00 	ret

00000770 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 770:	37 9c ff f8 	addi sp,sp,-8
 774:	5b 8b 00 08 	sw (sp+8),r11
 778:	5b 9d 00 04 	sw (sp+4),ra
	//nsleep(2016300);
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
		//c = ok();
		nsleep(2016300);
 77c:	78 01 00 00 	mvhi r1,0x0
 780:	38 21 09 7c 	ori r1,r1,0x97c
 784:	28 2b 00 00 	lw r11,(r1+0)
void init_wifi(){ //configurar el modulo como estación con puerto 80
	//uart_putstr1("AT+RST\r\n");
	//nsleep(2016300);
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
 788:	78 01 00 00 	mvhi r1,0x0
 78c:	38 21 09 80 	ori r1,r1,0x980
 790:	fb ff ff eb 	calli 73c <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 794:	b9 60 08 00 	mv r1,r11
 798:	fb ff ff 99 	calli 5fc <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPMODE=1\r\n");
 79c:	78 01 00 00 	mvhi r1,0x0
 7a0:	38 21 09 90 	ori r1,r1,0x990
 7a4:	fb ff ff e6 	calli 73c <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 7a8:	b9 60 08 00 	mv r1,r11
 7ac:	fb ff ff 94 	calli 5fc <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPSTART=\"TCP\",\"192.168.4.2\",1234\r\n");
 7b0:	78 01 00 00 	mvhi r1,0x0
 7b4:	38 21 09 a0 	ori r1,r1,0x9a0
 7b8:	fb ff ff e1 	calli 73c <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 7bc:	b9 60 08 00 	mv r1,r11
 7c0:	fb ff ff 8f 	calli 5fc <nsleep>
		uart_putstr1("AT+CIPSEND\r\n");
 7c4:	78 01 00 00 	mvhi r1,0x0
 7c8:	38 21 09 c8 	ori r1,r1,0x9c8
 7cc:	fb ff ff dc 	calli 73c <uart_putstr1>
		nsleep(2016300);
 7d0:	b9 60 08 00 	mv r1,r11
 7d4:	fb ff ff 8a 	calli 5fc <nsleep>
	//}
}
 7d8:	2b 9d 00 04 	lw ra,(sp+4)
 7dc:	2b 8b 00 08 	lw r11,(sp+8)
 7e0:	37 9c 00 08 	addi sp,sp,8
 7e4:	c3 a0 00 00 	ret

000007e8 <wifi_putchar>:

void wifi_putchar(char a){
 7e8:	78 02 00 00 	mvhi r2,0x0
 7ec:	38 42 09 dc 	ori r2,r2,0x9dc
 7f0:	28 43 00 00 	lw r3,(r2+0)
 7f4:	20 21 00 ff 	andi r1,r1,0xff
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 7f8:	28 62 00 00 	lw r2,(r3+0)
 7fc:	20 42 00 10 	andi r2,r2,0x10
 800:	5c 40 ff fe 	bne r2,r0,7f8 <wifi_putchar+0x10>
	uart1->rxtx = c;
 804:	58 61 00 04 	sw (r3+4),r1
	//int c = 0; 	  
	//while(c == 0){
		uart_putchar1(a);
		//c = ok();
	//}
}
 808:	c3 a0 00 00 	ret

0000080c <wifi_getchar>:
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 80c:	78 01 00 00 	mvhi r1,0x0
 810:	38 21 09 dc 	ori r1,r1,0x9dc
 814:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 818:	34 03 00 00 	mvi r3,0
		c = uart_getchar1();
		if (c ==':'){
 81c:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 820:	34 05 00 14 	mvi r5,20
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 824:	28 41 00 00 	lw r1,(r2+0)
 828:	20 21 00 01 	andi r1,r1,0x1
 82c:	44 20 ff fe 	be r1,r0,824 <wifi_getchar+0x18>
	return uart1->rxtx;
 830:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 834:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar1();
		if (c ==':'){
 838:	20 21 00 ff 	andi r1,r1,0xff
 83c:	44 24 00 04 	be r1,r4,84c <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 840:	5c 65 ff f9 	bne r3,r5,824 <wifi_getchar+0x18>
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 844:	34 01 00 0a 	mvi r1,10

}
 848:	c3 a0 00 00 	ret
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 84c:	28 41 00 00 	lw r1,(r2+0)
 850:	20 21 00 01 	andi r1,r1,0x1
 854:	44 20 ff fe 	be r1,r0,84c <wifi_getchar+0x40>
	return uart1->rxtx;
 858:	28 41 00 04 	lw r1,(r2+4)
 85c:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar1();
		if (c ==':'){
			c = uart_getchar1();
			return c;
 860:	c3 a0 00 00 	ret

00000864 <ok>:
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 864:	78 01 00 00 	mvhi r1,0x0
 868:	38 21 09 dc 	ori r1,r1,0x9dc
 86c:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 870:	34 03 00 00 	mvi r3,0
		a=uart_getchar1();
		if(a=='K'){
 874:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 878:	34 05 00 1e 	mvi r5,30
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 87c:	28 41 00 00 	lw r1,(r2+0)
 880:	20 21 00 01 	andi r1,r1,0x1
 884:	44 20 ff fe 	be r1,r0,87c <ok+0x18>
	return uart1->rxtx;
 888:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 88c:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar1();
		if(a=='K'){
 890:	20 21 00 ff 	andi r1,r1,0xff
 894:	44 24 00 04 	be r1,r4,8a4 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 898:	5c 65 ff f9 	bne r3,r5,87c <ok+0x18>
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 89c:	34 01 00 00 	mvi r1,0
 8a0:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar1();
		if(a=='K'){
			return 1;
 8a4:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 8a8:	c3 a0 00 00 	ret

000008ac <ReadChanel>:
Stop"BOTH"
ByteReaded"READ"
ByteToWrite"WRITE
*/

void ReadChanel(char ch){
 8ac:	20 21 00 ff 	andi r1,r1,0xff
	switch(ch){
 8b0:	34 02 00 01 	mvi r2,1
 8b4:	44 22 00 1f 	be r1,r2,930 <ReadChanel+0x84>
 8b8:	5c 20 00 0e 	bne r1,r0,8f0 <ReadChanel+0x44>
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
	   break;
	   default:
		i2c0->ByteConfigurationOne=0xC3;
 8bc:	78 01 00 00 	mvhi r1,0x0
 8c0:	38 21 09 e4 	ori r1,r1,0x9e4
 8c4:	28 21 00 00 	lw r1,(r1+0)
 8c8:	34 02 00 c3 	mvi r2,195
 8cc:	58 22 00 0c 	sw (r1+12),r2
	   break;
	}
	i2c0->ByteConfigurationTwo=0X83;//FS 4.096 volts although this is more than electrical especifications,there never be more than 3.6
 8d0:	34 02 00 83 	mvi r2,131
 8d4:	58 22 00 10 	sw (r1+16),r2
	i2c0->Start=0x01;
 8d8:	34 02 00 01 	mvi r2,1
 8dc:	58 22 00 14 	sw (r1+20),r2
	while((i2c0->Busy)==0x01);
 8e0:	34 03 00 01 	mvi r3,1
 8e4:	28 22 00 00 	lw r2,(r1+0)
 8e8:	44 43 ff ff 	be r2,r3,8e4 <ReadChanel+0x38>
}
 8ec:	c3 a0 00 00 	ret
ByteReaded"READ"
ByteToWrite"WRITE
*/

void ReadChanel(char ch){
	switch(ch){
 8f0:	34 02 00 02 	mvi r2,2
 8f4:	44 22 00 09 	be r1,r2,918 <ReadChanel+0x6c>
 8f8:	34 02 00 03 	mvi r2,3
 8fc:	5c 22 ff f0 	bne r1,r2,8bc <ReadChanel+0x10>
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
 900:	78 01 00 00 	mvhi r1,0x0
 904:	38 21 09 e4 	ori r1,r1,0x9e4
 908:	28 21 00 00 	lw r1,(r1+0)
 90c:	34 02 00 f3 	mvi r2,243
 910:	58 22 00 0c 	sw (r1+12),r2
	   break;
 914:	e3 ff ff ef 	bi 8d0 <ReadChanel+0x24>
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
 918:	78 01 00 00 	mvhi r1,0x0
 91c:	38 21 09 e4 	ori r1,r1,0x9e4
 920:	28 21 00 00 	lw r1,(r1+0)
 924:	34 02 00 e3 	mvi r2,227
 928:	58 22 00 0c 	sw (r1+12),r2
	   break;
 92c:	e3 ff ff e9 	bi 8d0 <ReadChanel+0x24>
	switch(ch){
	   case 0x00:
		i2c0->ByteConfigurationOne=0xC3;
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
 930:	78 01 00 00 	mvhi r1,0x0
 934:	38 21 09 e4 	ori r1,r1,0x9e4
 938:	28 21 00 00 	lw r1,(r1+0)
 93c:	34 02 00 d3 	mvi r2,211
 940:	58 22 00 0c 	sw (r1+12),r2
	   break;
 944:	e3 ff ff e3 	bi 8d0 <ReadChanel+0x24>

00000948 <GetByteOne>:
	while((i2c0->Busy)==0x01);
}


char GetByteOne(){
	return i2c0->ByteReadedOne;
 948:	78 01 00 00 	mvhi r1,0x0
 94c:	38 21 09 e4 	ori r1,r1,0x9e4
 950:	28 21 00 00 	lw r1,(r1+0)
 954:	28 21 00 04 	lw r1,(r1+4)
}
 958:	20 21 00 ff 	andi r1,r1,0xff
 95c:	c3 a0 00 00 	ret

00000960 <GetByteTwo>:
char GetByteTwo()
{
	return i2c0->ByteReadedTwo;
 960:	78 01 00 00 	mvhi r1,0x0
 964:	38 21 09 e4 	ori r1,r1,0x9e4
 968:	28 21 00 00 	lw r1,(r1+0)
 96c:	28 21 00 08 	lw r1,(r1+8)
}
 970:	20 21 00 ff 	andi r1,r1,0xff
 974:	c3 a0 00 00 	ret
