
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000062c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000060  0000062c  0000062c  00000680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  0000068c  0000068c  000006e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000006a0  000006a0  000006f4  2**2
                  ALLOC
  4 .debug_abbrev 00000253  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004f3  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001c1  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000077  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000233  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001b73  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000017f  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 61 	calli 250 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 a0 	ori gp,gp,0x6a0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 a0 	ori r1,r1,0x6a0
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 24 	ori r3,r3,0x724

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
 * 
 */

#include "soc-hw.h"

int  main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	}d 
	
}
*/

i2c_prueba();
 210:	f8 00 00 fd 	calli 604 <i2c_prueba>
}
 214:	2b 9d 00 04 	lw ra,(sp+4)
 218:	37 9c 00 04 	addi sp,sp,4
 21c:	c3 a0 00 00 	ret

00000220 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 220:	c3 a0 00 00 	ret

00000224 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 224:	78 01 00 00 	mvhi r1,0x0
 228:	38 21 07 20 	ori r1,r1,0x720
 22c:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 230:	78 02 00 00 	mvhi r2,0x0
 234:	38 42 06 90 	ori r2,r2,0x690
 238:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 23c:	34 63 00 01 	addi r3,r3,1
 240:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 244:	34 01 00 0e 	mvi r1,14
 248:	58 41 00 00 	sw (r2+0),r1
}
 24c:	c3 a0 00 00 	ret

00000250 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 250:	37 9c ff f0 	addi sp,sp,-16
 254:	5b 8b 00 10 	sw (sp+16),r11
 258:	5b 8c 00 0c 	sw (sp+12),r12
 25c:	5b 8d 00 08 	sw (sp+8),r13
 260:	5b 9d 00 04 	sw (sp+4),ra
 264:	78 0b 00 00 	mvhi r11,0x0
 268:	39 6b 06 a0 	ori r11,r11,0x6a0
 26c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 270:	35 6d 00 80 	addi r13,r11,128
 274:	e0 00 00 04 	bi 284 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 278:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 27c:	45 6d 00 08 	be r11,r13,29c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 280:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 284:	21 81 00 01 	andi r1,r12,0x1
 288:	44 20 ff fc 	be r1,r0,278 <irq_handler+0x28>
 28c:	29 61 00 00 	lw r1,(r11+0)
 290:	35 6b 00 04 	addi r11,r11,4
 294:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 298:	5d 6d ff fa 	bne r11,r13,280 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 29c:	2b 9d 00 04 	lw ra,(sp+4)
 2a0:	2b 8b 00 10 	lw r11,(sp+16)
 2a4:	2b 8c 00 0c 	lw r12,(sp+12)
 2a8:	2b 8d 00 08 	lw r13,(sp+8)
 2ac:	37 9c 00 10 	addi sp,sp,16
 2b0:	c3 a0 00 00 	ret

000002b4 <isr_init>:

void isr_init()
{
 2b4:	78 01 00 00 	mvhi r1,0x0
 2b8:	78 02 00 00 	mvhi r2,0x0
 2bc:	38 21 06 a0 	ori r1,r1,0x6a0
 2c0:	38 42 02 20 	ori r2,r2,0x220
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 2c4:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 2c8:	58 22 00 00 	sw (r1+0),r2
 2cc:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 2d0:	5c 23 ff fe 	bne r1,r3,2c8 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 2d4:	c3 a0 00 00 	ret

000002d8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 2d8:	78 03 00 00 	mvhi r3,0x0
 2dc:	3c 21 00 02 	sli r1,r1,2
 2e0:	38 63 06 a0 	ori r3,r3,0x6a0
 2e4:	b4 61 18 00 	add r3,r3,r1
 2e8:	58 62 00 00 	sw (r3+0),r2
}
 2ec:	c3 a0 00 00 	ret

000002f0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 2f0:	78 03 00 00 	mvhi r3,0x0
 2f4:	3c 21 00 02 	sli r1,r1,2
 2f8:	38 63 06 a0 	ori r3,r3,0x6a0
 2fc:	78 02 00 00 	mvhi r2,0x0
 300:	b4 61 18 00 	add r3,r3,r1
 304:	38 42 02 20 	ori r2,r2,0x220
 308:	58 62 00 00 	sw (r3+0),r2
}
 30c:	c3 a0 00 00 	ret

00000310 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 310:	78 04 00 00 	mvhi r4,0x0
 314:	38 84 06 2c 	ori r4,r4,0x62c
 318:	28 83 00 00 	lw r3,(r4+0)
 31c:	78 02 00 00 	mvhi r2,0x0
 320:	38 42 06 90 	ori r2,r2,0x690
 324:	28 42 00 00 	lw r2,(r2+0)
 328:	88 23 08 00 	mul r1,r1,r3
 32c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 330:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 334:	34 01 00 08 	mvi r1,8
 338:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 33c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 340:	20 21 00 01 	andi r1,r1,0x1
 344:	44 20 ff fe 	be r1,r0,33c <msleep+0x2c>
}
 348:	c3 a0 00 00 	ret

0000034c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 34c:	78 02 00 00 	mvhi r2,0x0
 350:	38 42 06 90 	ori r2,r2,0x690
 354:	28 42 00 00 	lw r2,(r2+0)
 358:	08 21 00 64 	muli r1,r1,100
 35c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 360:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 364:	34 01 00 08 	mvi r1,8
 368:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 36c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 370:	20 21 00 01 	andi r1,r1,0x1
 374:	44 20 ff fe 	be r1,r0,36c <nsleep+0x20>
}
 378:	c3 a0 00 00 	ret

0000037c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 37c:	78 01 00 00 	mvhi r1,0x0
 380:	38 21 06 90 	ori r1,r1,0x690
 384:	28 23 00 00 	lw r3,(r1+0)
 388:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 38c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 390:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 394:	38 21 07 20 	ori r1,r1,0x720

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 398:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 39c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3a0:	78 02 00 00 	mvhi r2,0x0
 3a4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3a8:	34 04 00 0e 	mvi r4,14
 3ac:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3b0:	38 21 06 a0 	ori r1,r1,0x6a0
 3b4:	38 42 02 24 	ori r2,r2,0x224
 3b8:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 3bc:	c3 a0 00 00 	ret

000003c0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 3c0:	c3 a0 00 00 	ret

000003c4 <uart_getchar>:

char uart_getchar()
{   
 3c4:	78 01 00 00 	mvhi r1,0x0
 3c8:	38 21 06 8c 	ori r1,r1,0x68c
 3cc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 3d0:	28 41 00 00 	lw r1,(r2+0)
 3d4:	20 21 00 01 	andi r1,r1,0x1
 3d8:	44 20 ff fe 	be r1,r0,3d0 <uart_getchar+0xc>
	return uart0->rxtx;
 3dc:	28 41 00 04 	lw r1,(r2+4)
}
 3e0:	20 21 00 ff 	andi r1,r1,0xff
 3e4:	c3 a0 00 00 	ret

000003e8 <uart_putchar>:

void uart_putchar(char c)
{
 3e8:	78 02 00 00 	mvhi r2,0x0
 3ec:	38 42 06 8c 	ori r2,r2,0x68c
 3f0:	28 43 00 00 	lw r3,(r2+0)
 3f4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 3f8:	28 62 00 00 	lw r2,(r3+0)
 3fc:	20 42 00 10 	andi r2,r2,0x10
 400:	5c 40 ff fe 	bne r2,r0,3f8 <uart_putchar+0x10>
	uart0->rxtx = c;
 404:	58 61 00 04 	sw (r3+4),r1
}
 408:	c3 a0 00 00 	ret

0000040c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 40c:	40 24 00 00 	lbu r4,(r1+0)
 410:	44 80 00 0b 	be r4,r0,43c <uart_putstr+0x30>
 414:	78 02 00 00 	mvhi r2,0x0
 418:	38 42 06 8c 	ori r2,r2,0x68c
 41c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 420:	28 62 00 00 	lw r2,(r3+0)
 424:	20 42 00 10 	andi r2,r2,0x10
 428:	5c 40 ff fe 	bne r2,r0,420 <uart_putstr+0x14>
	uart0->rxtx = c;
 42c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 430:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 434:	40 24 00 00 	lbu r4,(r1+0)
 438:	5c 82 ff fa 	bne r4,r2,420 <uart_putstr+0x14>
 43c:	c3 a0 00 00 	ret

00000440 <uart_init1>:
	//uart1->lcr = 0x03;  // Line Control Register:    8N1
	//uart1->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart1->div = (FCPU/(57600*16));
}
 440:	c3 a0 00 00 	ret

00000444 <uart_getchar1>:

char uart_getchar1()
{   
 444:	78 01 00 00 	mvhi r1,0x0
 448:	38 21 06 9c 	ori r1,r1,0x69c
 44c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 450:	28 41 00 00 	lw r1,(r2+0)
 454:	20 21 00 01 	andi r1,r1,0x1
 458:	44 20 ff fe 	be r1,r0,450 <uart_getchar1+0xc>
	return uart1->rxtx;
 45c:	28 41 00 04 	lw r1,(r2+4)
}
 460:	20 21 00 ff 	andi r1,r1,0xff
 464:	c3 a0 00 00 	ret

00000468 <uart_putchar1>:

void uart_putchar1(char c)
{
 468:	78 02 00 00 	mvhi r2,0x0
 46c:	38 42 06 9c 	ori r2,r2,0x69c
 470:	28 43 00 00 	lw r3,(r2+0)
 474:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 478:	28 62 00 00 	lw r2,(r3+0)
 47c:	20 42 00 10 	andi r2,r2,0x10
 480:	5c 40 ff fe 	bne r2,r0,478 <uart_putchar1+0x10>
	uart1->rxtx = c;
 484:	58 61 00 04 	sw (r3+4),r1
}
 488:	c3 a0 00 00 	ret

0000048c <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 48c:	40 24 00 00 	lbu r4,(r1+0)
 490:	44 80 00 0b 	be r4,r0,4bc <uart_putstr1+0x30>
 494:	78 02 00 00 	mvhi r2,0x0
 498:	38 42 06 9c 	ori r2,r2,0x69c
 49c:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 4a0:	28 62 00 00 	lw r2,(r3+0)
 4a4:	20 42 00 10 	andi r2,r2,0x10
 4a8:	5c 40 ff fe 	bne r2,r0,4a0 <uart_putstr1+0x14>
	uart1->rxtx = c;
 4ac:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 4b0:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 4b4:	40 24 00 00 	lbu r4,(r1+0)
 4b8:	5c 82 ff fa 	bne r4,r2,4a0 <uart_putstr1+0x14>
 4bc:	c3 a0 00 00 	ret

000004c0 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 4c0:	37 9c ff f8 	addi sp,sp,-8
 4c4:	5b 8b 00 08 	sw (sp+8),r11
 4c8:	5b 9d 00 04 	sw (sp+4),ra
	//uart_putstr1("AT+RST\r\n");
	nsleep(2016300);
 4cc:	78 01 00 00 	mvhi r1,0x0
 4d0:	38 21 06 30 	ori r1,r1,0x630
 4d4:	28 2b 00 00 	lw r11,(r1+0)
 4d8:	b9 60 08 00 	mv r1,r11
 4dc:	fb ff ff 9c 	calli 34c <nsleep>
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
 4e0:	78 01 00 00 	mvhi r1,0x0
 4e4:	38 21 06 34 	ori r1,r1,0x634
 4e8:	fb ff ff e9 	calli 48c <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 4ec:	b9 60 08 00 	mv r1,r11
 4f0:	fb ff ff 97 	calli 34c <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPMODE=1\r\n");
 4f4:	78 01 00 00 	mvhi r1,0x0
 4f8:	38 21 06 44 	ori r1,r1,0x644
 4fc:	fb ff ff e4 	calli 48c <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 500:	b9 60 08 00 	mv r1,r11
 504:	fb ff ff 92 	calli 34c <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPSTART=\"TCP\",\"192.168.4.2\",80\r\n");
 508:	78 01 00 00 	mvhi r1,0x0
 50c:	38 21 06 54 	ori r1,r1,0x654
 510:	fb ff ff df 	calli 48c <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 514:	b9 60 08 00 	mv r1,r11
 518:	fb ff ff 8d 	calli 34c <nsleep>
		uart_putstr1("AT+CIPSEND\r\n");
 51c:	78 01 00 00 	mvhi r1,0x0
 520:	38 21 06 7c 	ori r1,r1,0x67c
 524:	fb ff ff da 	calli 48c <uart_putstr1>
		nsleep(2016300);
 528:	b9 60 08 00 	mv r1,r11
 52c:	fb ff ff 88 	calli 34c <nsleep>
	//}
}
 530:	2b 9d 00 04 	lw ra,(sp+4)
 534:	2b 8b 00 08 	lw r11,(sp+8)
 538:	37 9c 00 08 	addi sp,sp,8
 53c:	c3 a0 00 00 	ret

00000540 <wifi_putchar>:

void wifi_putchar(char a){
 540:	78 02 00 00 	mvhi r2,0x0
 544:	38 42 06 9c 	ori r2,r2,0x69c
 548:	28 43 00 00 	lw r3,(r2+0)
 54c:	20 21 00 ff 	andi r1,r1,0xff
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 550:	28 62 00 00 	lw r2,(r3+0)
 554:	20 42 00 10 	andi r2,r2,0x10
 558:	5c 40 ff fe 	bne r2,r0,550 <wifi_putchar+0x10>
	uart1->rxtx = c;
 55c:	58 61 00 04 	sw (r3+4),r1
	//int c = 0; 	  
	//while(c == 0){
		uart_putchar1(a);
		//c = ok();
	//}
}
 560:	c3 a0 00 00 	ret

00000564 <wifi_getchar>:
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 564:	78 01 00 00 	mvhi r1,0x0
 568:	38 21 06 9c 	ori r1,r1,0x69c
 56c:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 570:	34 03 00 00 	mvi r3,0
		c = uart_getchar1();
		if (c ==':'){
 574:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 578:	34 05 00 14 	mvi r5,20
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 57c:	28 41 00 00 	lw r1,(r2+0)
 580:	20 21 00 01 	andi r1,r1,0x1
 584:	44 20 ff fe 	be r1,r0,57c <wifi_getchar+0x18>
	return uart1->rxtx;
 588:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 58c:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar1();
		if (c ==':'){
 590:	20 21 00 ff 	andi r1,r1,0xff
 594:	44 24 00 04 	be r1,r4,5a4 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 598:	5c 65 ff f9 	bne r3,r5,57c <wifi_getchar+0x18>
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 59c:	34 01 00 0a 	mvi r1,10

}
 5a0:	c3 a0 00 00 	ret
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 5a4:	28 41 00 00 	lw r1,(r2+0)
 5a8:	20 21 00 01 	andi r1,r1,0x1
 5ac:	44 20 ff fe 	be r1,r0,5a4 <wifi_getchar+0x40>
	return uart1->rxtx;
 5b0:	28 41 00 04 	lw r1,(r2+4)
 5b4:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar1();
		if (c ==':'){
			c = uart_getchar1();
			return c;
 5b8:	c3 a0 00 00 	ret

000005bc <ok>:
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 5bc:	78 01 00 00 	mvhi r1,0x0
 5c0:	38 21 06 9c 	ori r1,r1,0x69c
 5c4:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 5c8:	34 03 00 00 	mvi r3,0
		a=uart_getchar1();
		if(a=='K'){
 5cc:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 5d0:	34 05 00 1e 	mvi r5,30
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 5d4:	28 41 00 00 	lw r1,(r2+0)
 5d8:	20 21 00 01 	andi r1,r1,0x1
 5dc:	44 20 ff fe 	be r1,r0,5d4 <ok+0x18>
	return uart1->rxtx;
 5e0:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 5e4:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar1();
		if(a=='K'){
 5e8:	20 21 00 ff 	andi r1,r1,0xff
 5ec:	44 24 00 04 	be r1,r4,5fc <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 5f0:	5c 65 ff f9 	bne r3,r5,5d4 <ok+0x18>
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 5f4:	34 01 00 00 	mvi r1,0
 5f8:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar1();
		if(a=='K'){
			return 1;
 5fc:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 600:	c3 a0 00 00 	ret

00000604 <i2c_prueba>:

/******************************************************************************
 * i2c Functions
 */
void i2c_prueba(){
	i2c0->	CR 	= 0x02 & txr;
 604:	78 01 00 00 	mvhi r1,0x0
 608:	38 21 06 98 	ori r1,r1,0x698
 60c:	28 21 00 00 	lw r1,(r1+0)
 610:	34 02 00 02 	mvi r2,2
 614:	30 22 00 01 	sb (r1+1),r2
	i2c0->	TXR 	= 0x5;
 618:	34 02 00 05 	mvi r2,5
 61c:	30 22 00 00 	sb (r1+0),r2
	i2c0->	CR 	= 0x10;
 620:	34 02 00 10 	mvi r2,16
 624:	30 22 00 01 	sb (r1+1),r2
}
 628:	c3 a0 00 00 	ret
