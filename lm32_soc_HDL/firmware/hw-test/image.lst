
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000ac0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000060  00000ac0  00000ac0  00000b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00000b20  00000b20  00000b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000b30  00000b30  00000b84  2**2
                  ALLOC
  4 .debug_abbrev 00000288  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071a  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000780  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000283  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001d5  00000000  00000000  000020db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000060  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000025c  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000025bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 5f 	calli 648 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0b 30 	ori gp,gp,0xb30
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0b 30 	ori r1,r1,0xb30
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b b4 	ori r3,r3,0xbb4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
 * 
 */

#include "soc-hw.h"

int  main(){
 208:	37 9c ff b8 	addi sp,sp,-72
 20c:	5b 8b 00 44 	sw (sp+68),r11
 210:	5b 8c 00 40 	sw (sp+64),r12
 214:	5b 8d 00 3c 	sw (sp+60),r13
 218:	5b 8e 00 38 	sw (sp+56),r14
 21c:	5b 8f 00 34 	sw (sp+52),r15
 220:	5b 90 00 30 	sw (sp+48),r16
 224:	5b 91 00 2c 	sw (sp+44),r17
 228:	5b 92 00 28 	sw (sp+40),r18
 22c:	5b 93 00 24 	sw (sp+36),r19
 230:	5b 94 00 20 	sw (sp+32),r20
 234:	5b 95 00 1c 	sw (sp+28),r21
 238:	5b 96 00 18 	sw (sp+24),r22
 23c:	5b 97 00 14 	sw (sp+20),r23
 240:	5b 98 00 10 	sw (sp+16),r24
 244:	5b 99 00 0c 	sw (sp+12),r25
 248:	5b 9b 00 08 	sw (sp+8),fp
 24c:	5b 9d 00 04 	sw (sp+4),ra
	isr_init();
 250:	f8 00 01 17 	calli 6ac <isr_init>
	tic_init();
 254:	f8 00 01 48 	calli 774 <tic_init>
	irq_enable();
 258:	fb ff ff ba 	calli 140 <irq_enable>
	
	init_wifi();
 25c:	f8 00 01 97 	calli 8b8 <init_wifi>
 260:	e0 00 00 85 	bi 474 <main+0x26c>
		uart_putchar(k);
		uart_putchar(0);
		if(((c>=91))&((d>=97))&((j>=101))&((k<=73))){
			wifi_putchar(0x61);//a
		}
		if(((c<=79))&((d<=80))&((j<=85))&((k>=74))){
 264:	34 02 00 50 	mvi r2,80
 268:	34 01 00 4f 	mvi r1,79
 26c:	f0 4b 70 00 	cmpgeu r14,r2,r11
 270:	f0 32 18 00 	cmpgeu r3,r1,r18
 274:	34 02 00 55 	mvi r2,85
 278:	f0 53 80 00 	cmpgeu r16,r2,r19
 27c:	a1 c3 70 00 	and r14,r14,r3
 280:	75 91 00 49 	cmpgui r17,r12,0x49
 284:	a1 d0 78 00 	and r15,r14,r16
 288:	a1 f1 18 00 	and r3,r15,r17
 28c:	5c 60 00 e0 	bne r3,r0,60c <main+0x404>
			wifi_putchar(0x62);//b
		}
		if(((c<=80)&(c>=90))&((d<=96)&(d>=81))&((j<=100)&(j>=86))&((k>=74))){
			wifi_putchar(0x63);//c
		}
		if(((c<=90)&(c>=80))&((d<=96)&(d>=81))&((j<=85))&((k>=74))){
 290:	35 65 ff af 	addi r5,r11,-81
 294:	36 43 ff b0 	addi r3,r18,-80
 298:	20 a5 00 ff 	andi r5,r5,0xff
 29c:	20 63 00 ff 	andi r3,r3,0xff
 2a0:	34 01 00 0f 	mvi r1,15
 2a4:	34 02 00 0a 	mvi r2,10
 2a8:	f0 25 28 00 	cmpgeu r5,r1,r5
 2ac:	f0 43 18 00 	cmpgeu r3,r2,r3
 2b0:	a2 30 80 00 	and r16,r17,r16
 2b4:	a0 a3 18 00 	and r3,r5,r3
 2b8:	a2 03 80 00 	and r16,r16,r3
 2bc:	5e 00 00 d1 	bne r16,r0,600 <main+0x3f8>
			wifi_putchar(0x64);//d
		}
		if(((c<=79))&((d<=80))&((j<=85))&((k<=73))){
 2c0:	a1 ed 78 00 	and r15,r15,r13
 2c4:	5d e0 00 cc 	bne r15,r0,5f4 <main+0x3ec>
			wifi_putchar(0x65);//e
		}
		if(((c<=79))&((d<=80))&((j<=100)&(j>=86))&((k<=73))){
 2c8:	36 63 ff aa 	addi r3,r19,-86
 2cc:	20 63 00 ff 	andi r3,r3,0xff
 2d0:	34 01 00 0e 	mvi r1,14
 2d4:	f0 23 18 00 	cmpgeu r3,r1,r3
 2d8:	a0 6d 68 00 	and r13,r3,r13
 2dc:	a1 ae 70 00 	and r14,r13,r14
 2e0:	5d c0 00 c2 	bne r14,r0,5e8 <main+0x3e0>
			wifi_putchar(0x66);//f
		}
		if(((c<=77)&(c>=55))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
 2e4:	36 4d ff c9 	addi r13,r18,-55
 2e8:	34 02 00 16 	mvi r2,22
 2ec:	35 66 ff a9 	addi r6,r11,-87
 2f0:	36 65 ff c0 	addi r5,r19,-64
 2f4:	35 83 ff d0 	addi r3,r12,-48
 2f8:	21 ad 00 ff 	andi r13,r13,0xff
 2fc:	20 63 00 ff 	andi r3,r3,0xff
 300:	f0 4d 68 00 	cmpgeu r13,r2,r13
 304:	20 c6 00 ff 	andi r6,r6,0xff
 308:	34 02 00 15 	mvi r2,21
 30c:	20 a5 00 ff 	andi r5,r5,0xff
 310:	34 01 00 0d 	mvi r1,13
 314:	f0 43 88 00 	cmpgeu r17,r2,r3
 318:	f0 26 a0 00 	cmpgeu r20,r1,r6
 31c:	f0 45 a8 00 	cmpgeu r21,r2,r5
 320:	a2 8d 18 00 	and r3,r20,r13
 324:	a2 35 b0 00 	and r22,r17,r21
 328:	a0 76 18 00 	and r3,r3,r22
 32c:	5c 60 00 ac 	bne r3,r0,5dc <main+0x3d4>
			wifi_putchar(0x67);//g
		}
		if(((c<=77)&(c>=55))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
 330:	35 64 ff c0 	addi r4,r11,-64
 334:	20 84 00 ff 	andi r4,r4,0xff
 338:	34 01 00 15 	mvi r1,21
 33c:	f0 24 c0 00 	cmpgeu r24,r1,r4
 340:	a3 0d 68 00 	and r13,r24,r13
 344:	a1 b5 68 00 	and r13,r13,r21
 348:	a1 b1 18 00 	and r3,r13,r17
 34c:	5c 60 00 a1 	bne r3,r0,5d0 <main+0x3c8>
			wifi_putchar(0x68);//h
		}
		if(((c<=53)&(c>=37))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
 350:	36 46 ff db 	addi r6,r18,-37
 354:	35 6b ff 9a 	addi r11,r11,-102
 358:	34 02 00 10 	mvi r2,16
 35c:	34 01 00 1a 	mvi r1,26
 360:	20 c6 00 ff 	andi r6,r6,0xff
 364:	21 6b 00 ff 	andi r11,r11,0xff
 368:	36 63 ff 9a 	addi r3,r19,-102
 36c:	f0 46 78 00 	cmpgeu r15,r2,r6
 370:	f0 2b 58 00 	cmpgeu r11,r1,r11
 374:	20 63 00 ff 	andi r3,r3,0xff
 378:	35 8c ff b9 	addi r12,r12,-71
 37c:	f0 23 70 00 	cmpgeu r14,r1,r3
 380:	21 8c 00 ff 	andi r12,r12,0xff
 384:	34 02 00 19 	mvi r2,25
 388:	a1 6f 40 00 	and r8,r11,r15
 38c:	f0 4c 60 00 	cmpgeu r12,r2,r12
 390:	a1 0e 40 00 	and r8,r8,r14
 394:	5b 88 00 48 	sw (sp+72),r8
 398:	a1 0c 40 00 	and r8,r8,r12
 39c:	5d 00 00 8a 	bne r8,r0,5c4 <main+0x3bc>
			wifi_putchar(0x69);//i
		}		
		if(((c<=96)&(c>=79))&((d<=85)&(d>=64))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
 3a0:	36 52 ff b1 	addi r18,r18,-79
 3a4:	36 73 ff a9 	addi r19,r19,-87
 3a8:	22 52 00 ff 	andi r18,r18,0xff
 3ac:	22 73 00 ff 	andi r19,r19,0xff
 3b0:	34 01 00 11 	mvi r1,17
 3b4:	34 02 00 0d 	mvi r2,13
 3b8:	f0 32 80 00 	cmpgeu r16,r1,r18
 3bc:	f0 53 98 00 	cmpgeu r19,r2,r19
 3c0:	a2 18 d8 00 	and fp,r16,r24
 3c4:	a2 6c b8 00 	and r23,r19,r12
 3c8:	a3 77 50 00 	and r10,fp,r23
 3cc:	5d 40 00 7b 	bne r10,r0,5b8 <main+0x3b0>
			wifi_putchar(0x6B);//k
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
 3d0:	a2 0b 58 00 	and r11,r16,r11
 3d4:	a1 75 c8 00 	and r25,r11,r21
 3d8:	a3 31 50 00 	and r10,r25,r17
 3dc:	5d 40 00 74 	bne r10,r0,5ac <main+0x3a4>
			wifi_putchar(0x6C);//l
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
 3e0:	a2 14 80 00 	and r16,r16,r20
 3e4:	a2 16 50 00 	and r10,r16,r22
 3e8:	5d 40 00 6e 	bne r10,r0,5a0 <main+0x398>
			wifi_putchar(0x6D);//m
		}
		if(((c<=77)&(c>=55))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
 3ec:	a1 ac 48 00 	and r9,r13,r12
 3f0:	5d 20 00 69 	bne r9,r0,594 <main+0x38c>
			wifi_putchar(0x6E);//n
		}
		if(((c<=53)&(c>=37))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
 3f4:	a1 f4 78 00 	and r15,r15,r20
 3f8:	a1 f7 40 00 	and r8,r15,r23
 3fc:	5d 00 00 63 	bne r8,r0,588 <main+0x380>
			wifi_putchar(0x6F);//o
		}
		if(((c<=53)&(c>=37))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
 400:	a1 f6 38 00 	and r7,r15,r22
 404:	5c e0 00 5e 	bne r7,r0,57c <main+0x374>
			wifi_putchar(0x70);//p
		}
		if(((c<=99)&(c>=79))&((d<=100)&(d>=87))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
 408:	34 01 00 14 	mvi r1,20
 40c:	f0 32 90 00 	cmpgeu r18,r1,r18
 410:	a1 8e 70 00 	and r14,r12,r14
 414:	a2 54 30 00 	and r6,r18,r20
 418:	a0 ce 30 00 	and r6,r6,r14
 41c:	5c c0 00 55 	bne r6,r0,570 <main+0x368>
			wifi_putchar(0x71);//q
		}
		if(((c<=99)&(c>=79))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
 420:	a1 95 28 00 	and r5,r12,r21
 424:	a2 58 20 00 	and r4,r18,r24
 428:	a0 a4 20 00 	and r4,r5,r4
 42c:	5c 80 00 4e 	bne r4,r0,564 <main+0x35c>
			wifi_putchar(0x72);//r
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
 430:	a1 6e 20 00 	and r4,r11,r14
 434:	5c 80 00 49 	bne r4,r0,558 <main+0x350>
			wifi_putchar(0x73);//s
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=69)&(k>=48))){
 438:	a2 13 68 00 	and r13,r16,r19
 43c:	a1 b1 20 00 	and r4,r13,r17
 440:	5c 80 00 43 	bne r4,r0,54c <main+0x344>
			wifi_putchar(0x74);//t
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
 444:	a1 ac 68 00 	and r13,r13,r12
 448:	5d a0 00 3e 	bne r13,r0,540 <main+0x338>
			wifi_putchar(0x75);//u
		}
		if(((c<=96)&(c>=79))&((d<=85)&(d>=64))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
 44c:	a3 6e 18 00 	and r3,fp,r14
 450:	5c 60 00 39 	bne r3,r0,534 <main+0x32c>
			wifi_putchar(0x76);//v
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=100)&(j>=87))&((k<=69)&(k>=48))){
 454:	a2 71 10 00 	and r2,r19,r17
 458:	a0 4b 10 00 	and r2,r2,r11
 45c:	5c 40 00 33 	bne r2,r0,528 <main+0x320>
			wifi_putchar(0x78);//x
		}
		if(((c<=53)&(c>=37))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=69)&(k>=48))){
 460:	2b 82 00 48 	lw r2,(sp+72)
 464:	a0 51 08 00 	and r1,r2,r17
 468:	5c 20 00 29 	bne r1,r0,50c <main+0x304>
			wifi_putchar(0x79);//y
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
 46c:	a3 2c 60 00 	and r12,r25,r12
 470:	5d 80 00 2b 	bne r12,r0,51c <main+0x314>
	//char n;
	//char o;
	int e;
	e=0;	
	do{	
		ReadChanel(0x00);	
 474:	34 01 00 00 	mvi r1,0
 478:	f8 00 01 5f 	calli 9f4 <ReadChanel>
		c=GetByteOne();
 47c:	f8 00 01 85 	calli a90 <GetByteOne>
 480:	b8 20 90 00 	mv r18,r1
		ReadChanel(0x01);
 484:	34 01 00 01 	mvi r1,1
 488:	f8 00 01 5b 	calli 9f4 <ReadChanel>
		d=GetByteOne();
 48c:	f8 00 01 81 	calli a90 <GetByteOne>
 490:	b8 20 58 00 	mv r11,r1
		ReadChanel(0x02);
 494:	34 01 00 02 	mvi r1,2
 498:	f8 00 01 57 	calli 9f4 <ReadChanel>
		j=GetByteOne();
 49c:	f8 00 01 7d 	calli a90 <GetByteOne>
 4a0:	b8 20 98 00 	mv r19,r1
		ReadChanel(0x03);
 4a4:	34 01 00 03 	mvi r1,3
 4a8:	f8 00 01 53 	calli 9f4 <ReadChanel>
		k=GetByteOne();
 4ac:	f8 00 01 79 	calli a90 <GetByteOne>
 4b0:	b8 20 60 00 	mv r12,r1
		uart_putchar(c);
 4b4:	ba 40 08 00 	mv r1,r18
 4b8:	f8 00 00 ca 	calli 7e0 <uart_putchar>
		uart_putchar(d);
 4bc:	b9 60 08 00 	mv r1,r11
 4c0:	f8 00 00 c8 	calli 7e0 <uart_putchar>
		uart_putchar(j);
 4c4:	ba 60 08 00 	mv r1,r19
 4c8:	f8 00 00 c6 	calli 7e0 <uart_putchar>
		uart_putchar(k);
 4cc:	b9 80 08 00 	mv r1,r12
 4d0:	f8 00 00 c4 	calli 7e0 <uart_putchar>
		uart_putchar(0);
 4d4:	34 01 00 00 	mvi r1,0
 4d8:	f8 00 00 c2 	calli 7e0 <uart_putchar>
		if(((c>=91))&((d>=97))&((j>=101))&((k<=73))){
 4dc:	34 01 00 49 	mvi r1,73
 4e0:	f0 2c 68 00 	cmpgeu r13,r1,r12
 4e4:	76 65 00 64 	cmpgui r5,r19,0x64
 4e8:	75 63 00 60 	cmpgui r3,r11,0x60
 4ec:	76 46 00 5a 	cmpgui r6,r18,0x5a
 4f0:	a1 a5 28 00 	and r5,r13,r5
 4f4:	a0 66 18 00 	and r3,r3,r6
 4f8:	a0 a3 18 00 	and r3,r5,r3
 4fc:	44 60 ff 5a 	be r3,r0,264 <main+0x5c>
			wifi_putchar(0x61);//a
 500:	34 01 00 61 	mvi r1,97
 504:	f8 00 01 0b 	calli 930 <wifi_putchar>
 508:	e3 ff ff 57 	bi 264 <main+0x5c>
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=100)&(j>=87))&((k<=69)&(k>=48))){
			wifi_putchar(0x78);//x
		}
		if(((c<=53)&(c>=37))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=69)&(k>=48))){
			wifi_putchar(0x79);//y
 50c:	34 01 00 79 	mvi r1,121
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
 510:	a3 2c 60 00 	and r12,r25,r12
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=100)&(j>=87))&((k<=69)&(k>=48))){
			wifi_putchar(0x78);//x
		}
		if(((c<=53)&(c>=37))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=69)&(k>=48))){
			wifi_putchar(0x79);//y
 514:	f8 00 01 07 	calli 930 <wifi_putchar>
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
 518:	45 80 ff d7 	be r12,r0,474 <main+0x26c>
			wifi_putchar(0x7A);//z
 51c:	34 01 00 7a 	mvi r1,122
 520:	f8 00 01 04 	calli 930 <wifi_putchar>
 524:	e3 ff ff d4 	bi 474 <main+0x26c>
		}
		if(((c<=96)&(c>=79))&((d<=85)&(d>=64))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x76);//v
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=100)&(j>=87))&((k<=69)&(k>=48))){
			wifi_putchar(0x78);//x
 528:	34 01 00 78 	mvi r1,120
 52c:	f8 00 01 01 	calli 930 <wifi_putchar>
 530:	e3 ff ff cc 	bi 460 <main+0x258>
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
			wifi_putchar(0x75);//u
		}
		if(((c<=96)&(c>=79))&((d<=85)&(d>=64))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x76);//v
 534:	34 01 00 76 	mvi r1,118
 538:	f8 00 00 fe 	calli 930 <wifi_putchar>
 53c:	e3 ff ff c6 	bi 454 <main+0x24c>
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=69)&(k>=48))){
			wifi_putchar(0x74);//t
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
			wifi_putchar(0x75);//u
 540:	34 01 00 75 	mvi r1,117
 544:	f8 00 00 fb 	calli 930 <wifi_putchar>
 548:	e3 ff ff c1 	bi 44c <main+0x244>
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x73);//s
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=69)&(k>=48))){
			wifi_putchar(0x74);//t
 54c:	34 01 00 74 	mvi r1,116
 550:	f8 00 00 f8 	calli 930 <wifi_putchar>
 554:	e3 ff ff bc 	bi 444 <main+0x23c>
		}
		if(((c<=99)&(c>=79))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
			wifi_putchar(0x72);//r
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x73);//s
 558:	34 01 00 73 	mvi r1,115
 55c:	f8 00 00 f5 	calli 930 <wifi_putchar>
 560:	e3 ff ff b6 	bi 438 <main+0x230>
		}
		if(((c<=99)&(c>=79))&((d<=100)&(d>=87))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x71);//q
		}
		if(((c<=99)&(c>=79))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
			wifi_putchar(0x72);//r
 564:	34 01 00 72 	mvi r1,114
 568:	f8 00 00 f2 	calli 930 <wifi_putchar>
 56c:	e3 ff ff b1 	bi 430 <main+0x228>
		}
		if(((c<=53)&(c>=37))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x70);//p
		}
		if(((c<=99)&(c>=79))&((d<=100)&(d>=87))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x71);//q
 570:	34 01 00 71 	mvi r1,113
 574:	f8 00 00 ef 	calli 930 <wifi_putchar>
 578:	e3 ff ff aa 	bi 420 <main+0x218>
		}
		if(((c<=53)&(c>=37))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
			wifi_putchar(0x6F);//o
		}
		if(((c<=53)&(c>=37))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x70);//p
 57c:	34 01 00 70 	mvi r1,112
 580:	f8 00 00 ec 	calli 930 <wifi_putchar>
 584:	e3 ff ff a1 	bi 408 <main+0x200>
		}
		if(((c<=77)&(c>=55))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
			wifi_putchar(0x6E);//n
		}
		if(((c<=53)&(c>=37))&((d<=100)&(d>=87))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
			wifi_putchar(0x6F);//o
 588:	34 01 00 6f 	mvi r1,111
 58c:	f8 00 00 e9 	calli 930 <wifi_putchar>
 590:	e3 ff ff 9c 	bi 400 <main+0x1f8>
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x6D);//m
		}
		if(((c<=77)&(c>=55))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=96)&(k>=71))){
			wifi_putchar(0x6E);//n
 594:	34 01 00 6e 	mvi r1,110
 598:	f8 00 00 e6 	calli 930 <wifi_putchar>
 59c:	e3 ff ff 96 	bi 3f4 <main+0x1ec>
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x6C);//l
		}
		if(((c<=96)&(c>=79))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x6D);//m
 5a0:	34 01 00 6d 	mvi r1,109
 5a4:	f8 00 00 e3 	calli 930 <wifi_putchar>
 5a8:	e3 ff ff 91 	bi 3ec <main+0x1e4>
		}		
		if(((c<=96)&(c>=79))&((d<=85)&(d>=64))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
			wifi_putchar(0x6B);//k
		}
		if(((c<=96)&(c>=79))&((d<=128)&(d>=102))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x6C);//l
 5ac:	34 01 00 6c 	mvi r1,108
 5b0:	f8 00 00 e0 	calli 930 <wifi_putchar>
 5b4:	e3 ff ff 8b 	bi 3e0 <main+0x1d8>
		}
		if(((c<=53)&(c>=37))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x69);//i
		}		
		if(((c<=96)&(c>=79))&((d<=85)&(d>=64))&((j<=100)&(j>=87))&((k<=96)&(k>=71))){
			wifi_putchar(0x6B);//k
 5b8:	34 01 00 6b 	mvi r1,107
 5bc:	f8 00 00 dd 	calli 930 <wifi_putchar>
 5c0:	e3 ff ff 84 	bi 3d0 <main+0x1c8>
		}
		if(((c<=77)&(c>=55))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x68);//h
		}
		if(((c<=53)&(c>=37))&((d<=128)&(d>=102))&((j<=128)&(j>=102))&((k<=96)&(k>=71))){
			wifi_putchar(0x69);//i
 5c4:	34 01 00 69 	mvi r1,105
 5c8:	f8 00 00 da 	calli 930 <wifi_putchar>
 5cc:	e3 ff ff 75 	bi 3a0 <main+0x198>
		}
		if(((c<=77)&(c>=55))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x67);//g
		}
		if(((c<=77)&(c>=55))&((d<=85)&(d>=64))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x68);//h
 5d0:	34 01 00 68 	mvi r1,104
 5d4:	f8 00 00 d7 	calli 930 <wifi_putchar>
 5d8:	e3 ff ff 5e 	bi 350 <main+0x148>
		}
		if(((c<=79))&((d<=80))&((j<=100)&(j>=86))&((k<=73))){
			wifi_putchar(0x66);//f
		}
		if(((c<=77)&(c>=55))&((d<=100)&(d>=87))&((j<=85)&(j>=64))&((k<=69)&(k>=48))){
			wifi_putchar(0x67);//g
 5dc:	34 01 00 67 	mvi r1,103
 5e0:	f8 00 00 d4 	calli 930 <wifi_putchar>
 5e4:	e3 ff ff 53 	bi 330 <main+0x128>
		}
		if(((c<=79))&((d<=80))&((j<=85))&((k<=73))){
			wifi_putchar(0x65);//e
		}
		if(((c<=79))&((d<=80))&((j<=100)&(j>=86))&((k<=73))){
			wifi_putchar(0x66);//f
 5e8:	34 01 00 66 	mvi r1,102
 5ec:	f8 00 00 d1 	calli 930 <wifi_putchar>
 5f0:	e3 ff ff 3d 	bi 2e4 <main+0xdc>
		}
		if(((c<=90)&(c>=80))&((d<=96)&(d>=81))&((j<=85))&((k>=74))){
			wifi_putchar(0x64);//d
		}
		if(((c<=79))&((d<=80))&((j<=85))&((k<=73))){
			wifi_putchar(0x65);//e
 5f4:	34 01 00 65 	mvi r1,101
 5f8:	f8 00 00 ce 	calli 930 <wifi_putchar>
 5fc:	e3 ff ff 33 	bi 2c8 <main+0xc0>
		}
		if(((c<=80)&(c>=90))&((d<=96)&(d>=81))&((j<=100)&(j>=86))&((k>=74))){
			wifi_putchar(0x63);//c
		}
		if(((c<=90)&(c>=80))&((d<=96)&(d>=81))&((j<=85))&((k>=74))){
			wifi_putchar(0x64);//d
 600:	34 01 00 64 	mvi r1,100
 604:	f8 00 00 cb 	calli 930 <wifi_putchar>
 608:	e3 ff ff 2e 	bi 2c0 <main+0xb8>
		uart_putchar(0);
		if(((c>=91))&((d>=97))&((j>=101))&((k<=73))){
			wifi_putchar(0x61);//a
		}
		if(((c<=79))&((d<=80))&((j<=85))&((k>=74))){
			wifi_putchar(0x62);//b
 60c:	34 01 00 62 	mvi r1,98
 610:	f8 00 00 c8 	calli 930 <wifi_putchar>
 614:	e3 ff ff 1f 	bi 290 <main+0x88>

00000618 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 618:	c3 a0 00 00 	ret

0000061c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 61c:	78 01 00 00 	mvhi r1,0x0
 620:	38 21 0b b0 	ori r1,r1,0xbb0
 624:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 628:	78 02 00 00 	mvhi r2,0x0
 62c:	38 42 0b 28 	ori r2,r2,0xb28
 630:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 634:	34 63 00 01 	addi r3,r3,1
 638:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 63c:	34 01 00 0e 	mvi r1,14
 640:	58 41 00 00 	sw (r2+0),r1
}
 644:	c3 a0 00 00 	ret

00000648 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 648:	37 9c ff f0 	addi sp,sp,-16
 64c:	5b 8b 00 10 	sw (sp+16),r11
 650:	5b 8c 00 0c 	sw (sp+12),r12
 654:	5b 8d 00 08 	sw (sp+8),r13
 658:	5b 9d 00 04 	sw (sp+4),ra
 65c:	78 0b 00 00 	mvhi r11,0x0
 660:	39 6b 0b 30 	ori r11,r11,0xb30
 664:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 668:	35 6d 00 80 	addi r13,r11,128
 66c:	e0 00 00 04 	bi 67c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 670:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 674:	45 6d 00 08 	be r11,r13,694 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 678:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 67c:	21 81 00 01 	andi r1,r12,0x1
 680:	44 20 ff fc 	be r1,r0,670 <irq_handler+0x28>
 684:	29 61 00 00 	lw r1,(r11+0)
 688:	35 6b 00 04 	addi r11,r11,4
 68c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 690:	5d 6d ff fa 	bne r11,r13,678 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 694:	2b 9d 00 04 	lw ra,(sp+4)
 698:	2b 8b 00 10 	lw r11,(sp+16)
 69c:	2b 8c 00 0c 	lw r12,(sp+12)
 6a0:	2b 8d 00 08 	lw r13,(sp+8)
 6a4:	37 9c 00 10 	addi sp,sp,16
 6a8:	c3 a0 00 00 	ret

000006ac <isr_init>:

void isr_init()
{
 6ac:	78 01 00 00 	mvhi r1,0x0
 6b0:	78 02 00 00 	mvhi r2,0x0
 6b4:	38 21 0b 30 	ori r1,r1,0xb30
 6b8:	38 42 06 18 	ori r2,r2,0x618
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 6bc:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 6c0:	58 22 00 00 	sw (r1+0),r2
 6c4:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 6c8:	5c 23 ff fe 	bne r1,r3,6c0 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 6cc:	c3 a0 00 00 	ret

000006d0 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 6d0:	78 03 00 00 	mvhi r3,0x0
 6d4:	3c 21 00 02 	sli r1,r1,2
 6d8:	38 63 0b 30 	ori r3,r3,0xb30
 6dc:	b4 61 18 00 	add r3,r3,r1
 6e0:	58 62 00 00 	sw (r3+0),r2
}
 6e4:	c3 a0 00 00 	ret

000006e8 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 6e8:	78 03 00 00 	mvhi r3,0x0
 6ec:	3c 21 00 02 	sli r1,r1,2
 6f0:	38 63 0b 30 	ori r3,r3,0xb30
 6f4:	78 02 00 00 	mvhi r2,0x0
 6f8:	b4 61 18 00 	add r3,r3,r1
 6fc:	38 42 06 18 	ori r2,r2,0x618
 700:	58 62 00 00 	sw (r3+0),r2
}
 704:	c3 a0 00 00 	ret

00000708 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 708:	78 04 00 00 	mvhi r4,0x0
 70c:	38 84 0a c0 	ori r4,r4,0xac0
 710:	28 83 00 00 	lw r3,(r4+0)
 714:	78 02 00 00 	mvhi r2,0x0
 718:	38 42 0b 28 	ori r2,r2,0xb28
 71c:	28 42 00 00 	lw r2,(r2+0)
 720:	88 23 08 00 	mul r1,r1,r3
 724:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 728:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 72c:	34 01 00 08 	mvi r1,8
 730:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 734:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 738:	20 21 00 01 	andi r1,r1,0x1
 73c:	44 20 ff fe 	be r1,r0,734 <msleep+0x2c>
}
 740:	c3 a0 00 00 	ret

00000744 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 744:	78 02 00 00 	mvhi r2,0x0
 748:	38 42 0b 28 	ori r2,r2,0xb28
 74c:	28 42 00 00 	lw r2,(r2+0)
 750:	08 21 00 64 	muli r1,r1,100
 754:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 758:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 75c:	34 01 00 08 	mvi r1,8
 760:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 764:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 768:	20 21 00 01 	andi r1,r1,0x1
 76c:	44 20 ff fe 	be r1,r0,764 <nsleep+0x20>
}
 770:	c3 a0 00 00 	ret

00000774 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 774:	78 01 00 00 	mvhi r1,0x0
 778:	38 21 0b 28 	ori r1,r1,0xb28
 77c:	28 23 00 00 	lw r3,(r1+0)
 780:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 784:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 788:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 78c:	38 21 0b b0 	ori r1,r1,0xbb0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 790:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 794:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 798:	78 02 00 00 	mvhi r2,0x0
 79c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 7a0:	34 04 00 0e 	mvi r4,14
 7a4:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 7a8:	38 21 0b 30 	ori r1,r1,0xb30
 7ac:	38 42 06 1c 	ori r2,r2,0x61c
 7b0:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 7b4:	c3 a0 00 00 	ret

000007b8 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 7b8:	c3 a0 00 00 	ret

000007bc <uart_getchar>:

char uart_getchar()
{   
 7bc:	78 01 00 00 	mvhi r1,0x0
 7c0:	38 21 0b 20 	ori r1,r1,0xb20
 7c4:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 7c8:	28 41 00 00 	lw r1,(r2+0)
 7cc:	20 21 00 01 	andi r1,r1,0x1
 7d0:	44 20 ff fe 	be r1,r0,7c8 <uart_getchar+0xc>
	return uart0->rxtx;
 7d4:	28 41 00 04 	lw r1,(r2+4)
}
 7d8:	20 21 00 ff 	andi r1,r1,0xff
 7dc:	c3 a0 00 00 	ret

000007e0 <uart_putchar>:

void uart_putchar(char c)
{
 7e0:	78 02 00 00 	mvhi r2,0x0
 7e4:	38 42 0b 20 	ori r2,r2,0xb20
 7e8:	28 43 00 00 	lw r3,(r2+0)
 7ec:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 7f0:	28 62 00 00 	lw r2,(r3+0)
 7f4:	20 42 00 10 	andi r2,r2,0x10
 7f8:	5c 40 ff fe 	bne r2,r0,7f0 <uart_putchar+0x10>
	uart0->rxtx = c;
 7fc:	58 61 00 04 	sw (r3+4),r1
}
 800:	c3 a0 00 00 	ret

00000804 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 804:	40 24 00 00 	lbu r4,(r1+0)
 808:	44 80 00 0b 	be r4,r0,834 <uart_putstr+0x30>
 80c:	78 02 00 00 	mvhi r2,0x0
 810:	38 42 0b 20 	ori r2,r2,0xb20
 814:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 818:	28 62 00 00 	lw r2,(r3+0)
 81c:	20 42 00 10 	andi r2,r2,0x10
 820:	5c 40 ff fe 	bne r2,r0,818 <uart_putstr+0x14>
	uart0->rxtx = c;
 824:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 828:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 82c:	40 24 00 00 	lbu r4,(r1+0)
 830:	5c 82 ff fa 	bne r4,r2,818 <uart_putstr+0x14>
 834:	c3 a0 00 00 	ret

00000838 <uart_init1>:
	//uart1->lcr = 0x03;  // Line Control Register:    8N1
	//uart1->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart1->div = (FCPU/(57600*16));
}
 838:	c3 a0 00 00 	ret

0000083c <uart_getchar1>:

char uart_getchar1()
{   
 83c:	78 01 00 00 	mvhi r1,0x0
 840:	38 21 0b 24 	ori r1,r1,0xb24
 844:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 848:	28 41 00 00 	lw r1,(r2+0)
 84c:	20 21 00 01 	andi r1,r1,0x1
 850:	44 20 ff fe 	be r1,r0,848 <uart_getchar1+0xc>
	return uart1->rxtx;
 854:	28 41 00 04 	lw r1,(r2+4)
}
 858:	20 21 00 ff 	andi r1,r1,0xff
 85c:	c3 a0 00 00 	ret

00000860 <uart_putchar1>:

void uart_putchar1(char c)
{
 860:	78 02 00 00 	mvhi r2,0x0
 864:	38 42 0b 24 	ori r2,r2,0xb24
 868:	28 43 00 00 	lw r3,(r2+0)
 86c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 870:	28 62 00 00 	lw r2,(r3+0)
 874:	20 42 00 10 	andi r2,r2,0x10
 878:	5c 40 ff fe 	bne r2,r0,870 <uart_putchar1+0x10>
	uart1->rxtx = c;
 87c:	58 61 00 04 	sw (r3+4),r1
}
 880:	c3 a0 00 00 	ret

00000884 <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 884:	40 24 00 00 	lbu r4,(r1+0)
 888:	44 80 00 0b 	be r4,r0,8b4 <uart_putstr1+0x30>
 88c:	78 02 00 00 	mvhi r2,0x0
 890:	38 42 0b 24 	ori r2,r2,0xb24
 894:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 898:	28 62 00 00 	lw r2,(r3+0)
 89c:	20 42 00 10 	andi r2,r2,0x10
 8a0:	5c 40 ff fe 	bne r2,r0,898 <uart_putstr1+0x14>
	uart1->rxtx = c;
 8a4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 8a8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 8ac:	40 24 00 00 	lbu r4,(r1+0)
 8b0:	5c 82 ff fa 	bne r4,r2,898 <uart_putstr1+0x14>
 8b4:	c3 a0 00 00 	ret

000008b8 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 8b8:	37 9c ff f8 	addi sp,sp,-8
 8bc:	5b 8b 00 08 	sw (sp+8),r11
 8c0:	5b 9d 00 04 	sw (sp+4),ra
	//nsleep(2016300);
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
		//c = ok();
		nsleep(2016300);
 8c4:	78 01 00 00 	mvhi r1,0x0
 8c8:	38 21 0a c4 	ori r1,r1,0xac4
 8cc:	28 2b 00 00 	lw r11,(r1+0)
void init_wifi(){ //configurar el modulo como estación con puerto 80
	//uart_putstr1("AT+RST\r\n");
	//nsleep(2016300);
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
 8d0:	78 01 00 00 	mvhi r1,0x0
 8d4:	38 21 0a c8 	ori r1,r1,0xac8
 8d8:	fb ff ff eb 	calli 884 <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 8dc:	b9 60 08 00 	mv r1,r11
 8e0:	fb ff ff 99 	calli 744 <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPMODE=1\r\n");
 8e4:	78 01 00 00 	mvhi r1,0x0
 8e8:	38 21 0a d8 	ori r1,r1,0xad8
 8ec:	fb ff ff e6 	calli 884 <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 8f0:	b9 60 08 00 	mv r1,r11
 8f4:	fb ff ff 94 	calli 744 <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPSTART=\"TCP\",\"192.168.4.2\",1234\r\n");
 8f8:	78 01 00 00 	mvhi r1,0x0
 8fc:	38 21 0a e8 	ori r1,r1,0xae8
 900:	fb ff ff e1 	calli 884 <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 904:	b9 60 08 00 	mv r1,r11
 908:	fb ff ff 8f 	calli 744 <nsleep>
		uart_putstr1("AT+CIPSEND\r\n");
 90c:	78 01 00 00 	mvhi r1,0x0
 910:	38 21 0b 10 	ori r1,r1,0xb10
 914:	fb ff ff dc 	calli 884 <uart_putstr1>
		nsleep(2016300);
 918:	b9 60 08 00 	mv r1,r11
 91c:	fb ff ff 8a 	calli 744 <nsleep>
	//}
}
 920:	2b 9d 00 04 	lw ra,(sp+4)
 924:	2b 8b 00 08 	lw r11,(sp+8)
 928:	37 9c 00 08 	addi sp,sp,8
 92c:	c3 a0 00 00 	ret

00000930 <wifi_putchar>:

void wifi_putchar(char a){
 930:	78 02 00 00 	mvhi r2,0x0
 934:	38 42 0b 24 	ori r2,r2,0xb24
 938:	28 43 00 00 	lw r3,(r2+0)
 93c:	20 21 00 ff 	andi r1,r1,0xff
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 940:	28 62 00 00 	lw r2,(r3+0)
 944:	20 42 00 10 	andi r2,r2,0x10
 948:	5c 40 ff fe 	bne r2,r0,940 <wifi_putchar+0x10>
	uart1->rxtx = c;
 94c:	58 61 00 04 	sw (r3+4),r1
	//int c = 0; 	  
	//while(c == 0){
		uart_putchar1(a);
		//c = ok();
	//}
}
 950:	c3 a0 00 00 	ret

00000954 <wifi_getchar>:
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 954:	78 01 00 00 	mvhi r1,0x0
 958:	38 21 0b 24 	ori r1,r1,0xb24
 95c:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 960:	34 03 00 00 	mvi r3,0
		c = uart_getchar1();
		if (c ==':'){
 964:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 968:	34 05 00 14 	mvi r5,20
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 96c:	28 41 00 00 	lw r1,(r2+0)
 970:	20 21 00 01 	andi r1,r1,0x1
 974:	44 20 ff fe 	be r1,r0,96c <wifi_getchar+0x18>
	return uart1->rxtx;
 978:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 97c:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar1();
		if (c ==':'){
 980:	20 21 00 ff 	andi r1,r1,0xff
 984:	44 24 00 04 	be r1,r4,994 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 988:	5c 65 ff f9 	bne r3,r5,96c <wifi_getchar+0x18>
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 98c:	34 01 00 0a 	mvi r1,10

}
 990:	c3 a0 00 00 	ret
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 994:	28 41 00 00 	lw r1,(r2+0)
 998:	20 21 00 01 	andi r1,r1,0x1
 99c:	44 20 ff fe 	be r1,r0,994 <wifi_getchar+0x40>
	return uart1->rxtx;
 9a0:	28 41 00 04 	lw r1,(r2+4)
 9a4:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar1();
		if (c ==':'){
			c = uart_getchar1();
			return c;
 9a8:	c3 a0 00 00 	ret

000009ac <ok>:
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 9ac:	78 01 00 00 	mvhi r1,0x0
 9b0:	38 21 0b 24 	ori r1,r1,0xb24
 9b4:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9b8:	34 03 00 00 	mvi r3,0
		a=uart_getchar1();
		if(a=='K'){
 9bc:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9c0:	34 05 00 1e 	mvi r5,30
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 9c4:	28 41 00 00 	lw r1,(r2+0)
 9c8:	20 21 00 01 	andi r1,r1,0x1
 9cc:	44 20 ff fe 	be r1,r0,9c4 <ok+0x18>
	return uart1->rxtx;
 9d0:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9d4:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar1();
		if(a=='K'){
 9d8:	20 21 00 ff 	andi r1,r1,0xff
 9dc:	44 24 00 04 	be r1,r4,9ec <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 9e0:	5c 65 ff f9 	bne r3,r5,9c4 <ok+0x18>
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 9e4:	34 01 00 00 	mvi r1,0
 9e8:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar1();
		if(a=='K'){
			return 1;
 9ec:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 9f0:	c3 a0 00 00 	ret

000009f4 <ReadChanel>:
Stop"BOTH"
ByteReaded"READ"
ByteToWrite"WRITE
*/

void ReadChanel(char ch){
 9f4:	20 21 00 ff 	andi r1,r1,0xff
	switch(ch){
 9f8:	34 02 00 01 	mvi r2,1
 9fc:	44 22 00 1f 	be r1,r2,a78 <ReadChanel+0x84>
 a00:	5c 20 00 0e 	bne r1,r0,a38 <ReadChanel+0x44>
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
	   break;
	   default:
		i2c0->ByteConfigurationOne=0xC3;
 a04:	78 01 00 00 	mvhi r1,0x0
 a08:	38 21 0b 2c 	ori r1,r1,0xb2c
 a0c:	28 21 00 00 	lw r1,(r1+0)
 a10:	34 02 00 c3 	mvi r2,195
 a14:	58 22 00 0c 	sw (r1+12),r2
	   break;
	}
	i2c0->ByteConfigurationTwo=0X83;//FS 4.096 volts although this is more than electrical especifications,there never be more than 3.6
 a18:	34 02 00 83 	mvi r2,131
 a1c:	58 22 00 10 	sw (r1+16),r2
	i2c0->Start=0x01;
 a20:	34 02 00 01 	mvi r2,1
 a24:	58 22 00 14 	sw (r1+20),r2
	while((i2c0->Busy)==0x01);
 a28:	34 03 00 01 	mvi r3,1
 a2c:	28 22 00 00 	lw r2,(r1+0)
 a30:	44 43 ff ff 	be r2,r3,a2c <ReadChanel+0x38>
}
 a34:	c3 a0 00 00 	ret
ByteReaded"READ"
ByteToWrite"WRITE
*/

void ReadChanel(char ch){
	switch(ch){
 a38:	34 02 00 02 	mvi r2,2
 a3c:	44 22 00 09 	be r1,r2,a60 <ReadChanel+0x6c>
 a40:	34 02 00 03 	mvi r2,3
 a44:	5c 22 ff f0 	bne r1,r2,a04 <ReadChanel+0x10>
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
 a48:	78 01 00 00 	mvhi r1,0x0
 a4c:	38 21 0b 2c 	ori r1,r1,0xb2c
 a50:	28 21 00 00 	lw r1,(r1+0)
 a54:	34 02 00 f3 	mvi r2,243
 a58:	58 22 00 0c 	sw (r1+12),r2
	   break;
 a5c:	e3 ff ff ef 	bi a18 <ReadChanel+0x24>
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
 a60:	78 01 00 00 	mvhi r1,0x0
 a64:	38 21 0b 2c 	ori r1,r1,0xb2c
 a68:	28 21 00 00 	lw r1,(r1+0)
 a6c:	34 02 00 e3 	mvi r2,227
 a70:	58 22 00 0c 	sw (r1+12),r2
	   break;
 a74:	e3 ff ff e9 	bi a18 <ReadChanel+0x24>
	switch(ch){
	   case 0x00:
		i2c0->ByteConfigurationOne=0xC3;
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
 a78:	78 01 00 00 	mvhi r1,0x0
 a7c:	38 21 0b 2c 	ori r1,r1,0xb2c
 a80:	28 21 00 00 	lw r1,(r1+0)
 a84:	34 02 00 d3 	mvi r2,211
 a88:	58 22 00 0c 	sw (r1+12),r2
	   break;
 a8c:	e3 ff ff e3 	bi a18 <ReadChanel+0x24>

00000a90 <GetByteOne>:
	while((i2c0->Busy)==0x01);
}


char GetByteOne(){
	return i2c0->ByteReadedOne;
 a90:	78 01 00 00 	mvhi r1,0x0
 a94:	38 21 0b 2c 	ori r1,r1,0xb2c
 a98:	28 21 00 00 	lw r1,(r1+0)
 a9c:	28 21 00 04 	lw r1,(r1+4)
}
 aa0:	20 21 00 ff 	andi r1,r1,0xff
 aa4:	c3 a0 00 00 	ret

00000aa8 <GetByteTwo>:
char GetByteTwo()
{
	return i2c0->ByteReadedTwo;
 aa8:	78 01 00 00 	mvhi r1,0x0
 aac:	38 21 0b 2c 	ori r1,r1,0xb2c
 ab0:	28 21 00 00 	lw r1,(r1+0)
 ab4:	28 21 00 08 	lw r1,(r1+8)
}
 ab8:	20 21 00 ff 	andi r1,r1,0xff
 abc:	c3 a0 00 00 	ret
