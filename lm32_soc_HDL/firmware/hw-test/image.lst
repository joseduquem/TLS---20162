
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000007ac  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000060  000007ac  000007ac  00000800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  0000080c  0000080c  00000860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000081c  0000081c  00000870  2**2
                  ALLOC
  4 .debug_abbrev 00000288  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000071a  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000062b  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000022b  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001d5  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000060  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000025c  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 9a 	calli 334 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 20 	ori gp,gp,0x820
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 1c 	ori r1,r1,0x81c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 a0 	ori r3,r3,0x8a0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
 * 
 */

#include "soc-hw.h"

int  main(){
 208:	37 9c ff e0 	addi sp,sp,-32
 20c:	5b 8b 00 20 	sw (sp+32),r11
 210:	5b 8c 00 1c 	sw (sp+28),r12
 214:	5b 8d 00 18 	sw (sp+24),r13
 218:	5b 8e 00 14 	sw (sp+20),r14
 21c:	5b 8f 00 10 	sw (sp+16),r15
 220:	5b 90 00 0c 	sw (sp+12),r16
 224:	5b 91 00 08 	sw (sp+8),r17
 228:	5b 9d 00 04 	sw (sp+4),ra
		uart_putchar(c);
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
		if(((c<=98)&(c>=82))&((d<=98)&(d>=80))&((j<=98)&(j>=82))&((k<=72)&(k>=58))){
 22c:	34 11 00 0e 	mvi r17,14
 */

#include "soc-hw.h"

int  main(){
	isr_init();
 230:	f8 00 00 5a 	calli 398 <isr_init>
		uart_putchar(c);
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
		if(((c<=98)&(c>=82))&((d<=98)&(d>=80))&((j<=98)&(j>=82))&((k<=72)&(k>=58))){
 234:	34 0f 00 10 	mvi r15,16

#include "soc-hw.h"

int  main(){
	isr_init();
	tic_init();
 238:	f8 00 00 8a 	calli 460 <tic_init>
		uart_putchar(c);
		uart_putchar(d);
		uart_putchar(j);
		uart_putchar(k);
		uart_putchar(0);
		if(((c<=98)&(c>=82))&((d<=98)&(d>=80))&((j<=98)&(j>=82))&((k<=72)&(k>=58))){
 23c:	34 10 00 12 	mvi r16,18
#include "soc-hw.h"

int  main(){
	isr_init();
	tic_init();
	irq_enable();
 240:	fb ff ff c0 	calli 140 <irq_enable>
	
	init_wifi();
 244:	f8 00 00 d8 	calli 5a4 <init_wifi>
	//char n;
	//char o;
	int e;
	e=0;	
	do{	
		ReadChanel(0x00);	
 248:	34 01 00 00 	mvi r1,0
 24c:	f8 00 01 25 	calli 6e0 <ReadChanel>
		c=GetByteOne();
 250:	f8 00 01 4b 	calli 77c <GetByteOne>
 254:	b8 20 58 00 	mv r11,r1
		ReadChanel(0x01);
 258:	34 01 00 01 	mvi r1,1
 25c:	f8 00 01 21 	calli 6e0 <ReadChanel>
		d=GetByteOne();
 260:	f8 00 01 47 	calli 77c <GetByteOne>
 264:	b8 20 60 00 	mv r12,r1
		ReadChanel(0x02);
 268:	34 01 00 02 	mvi r1,2
 26c:	f8 00 01 1d 	calli 6e0 <ReadChanel>
		j=GetByteOne();
 270:	f8 00 01 43 	calli 77c <GetByteOne>
 274:	b8 20 68 00 	mv r13,r1
		ReadChanel(0x03);
 278:	34 01 00 03 	mvi r1,3
 27c:	f8 00 01 19 	calli 6e0 <ReadChanel>
		k=GetByteOne();
 280:	f8 00 01 3f 	calli 77c <GetByteOne>
 284:	b8 20 70 00 	mv r14,r1
		uart_putchar(c);
 288:	b9 60 08 00 	mv r1,r11
 28c:	f8 00 00 90 	calli 4cc <uart_putchar>
		uart_putchar(d);
 290:	b9 80 08 00 	mv r1,r12
 294:	f8 00 00 8e 	calli 4cc <uart_putchar>
		uart_putchar(j);
 298:	b9 a0 08 00 	mv r1,r13
 29c:	f8 00 00 8c 	calli 4cc <uart_putchar>
		uart_putchar(k);
 2a0:	b9 c0 08 00 	mv r1,r14
 2a4:	f8 00 00 8a 	calli 4cc <uart_putchar>
		uart_putchar(0);
 2a8:	34 01 00 00 	mvi r1,0
 2ac:	f8 00 00 88 	calli 4cc <uart_putchar>
		if(((c<=98)&(c>=82))&((d<=98)&(d>=80))&((j<=98)&(j>=82))&((k<=72)&(k>=58))){
 2b0:	35 c1 ff c6 	addi r1,r14,-58
 2b4:	35 ad ff ae 	addi r13,r13,-82
 2b8:	35 8c ff b0 	addi r12,r12,-80
 2bc:	35 6b ff ae 	addi r11,r11,-82
 2c0:	20 21 00 ff 	andi r1,r1,0xff
 2c4:	21 ad 00 ff 	andi r13,r13,0xff
 2c8:	21 8c 00 ff 	andi r12,r12,0xff
 2cc:	21 6b 00 ff 	andi r11,r11,0xff
 2d0:	f2 21 08 00 	cmpgeu r1,r17,r1
 2d4:	f1 ed 68 00 	cmpgeu r13,r15,r13
 2d8:	f2 0c 60 00 	cmpgeu r12,r16,r12
 2dc:	f1 eb 58 00 	cmpgeu r11,r15,r11
 2e0:	a0 2d 08 00 	and r1,r1,r13
 2e4:	a1 8b 58 00 	and r11,r12,r11
 2e8:	a0 2b 08 00 	and r1,r1,r11
 2ec:	44 20 ff d7 	be r1,r0,248 <main+0x40>
		uart_putchar(1);
 2f0:	34 01 00 01 	mvi r1,1
 2f4:	f8 00 00 76 	calli 4cc <uart_putchar>
		wifi_putchar(0x61);
 2f8:	34 01 00 61 	mvi r1,97
 2fc:	f8 00 00 c8 	calli 61c <wifi_putchar>
 300:	e3 ff ff d2 	bi 248 <main+0x40>

00000304 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 304:	c3 a0 00 00 	ret

00000308 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 308:	78 01 00 00 	mvhi r1,0x0
 30c:	38 21 08 9c 	ori r1,r1,0x89c
 310:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 314:	78 02 00 00 	mvhi r2,0x0
 318:	38 42 08 14 	ori r2,r2,0x814
 31c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 320:	34 63 00 01 	addi r3,r3,1
 324:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 328:	34 01 00 0e 	mvi r1,14
 32c:	58 41 00 00 	sw (r2+0),r1
}
 330:	c3 a0 00 00 	ret

00000334 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 334:	37 9c ff f0 	addi sp,sp,-16
 338:	5b 8b 00 10 	sw (sp+16),r11
 33c:	5b 8c 00 0c 	sw (sp+12),r12
 340:	5b 8d 00 08 	sw (sp+8),r13
 344:	5b 9d 00 04 	sw (sp+4),ra
 348:	78 0b 00 00 	mvhi r11,0x0
 34c:	39 6b 08 1c 	ori r11,r11,0x81c
 350:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 354:	35 6d 00 80 	addi r13,r11,128
 358:	e0 00 00 04 	bi 368 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 35c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 360:	45 6d 00 08 	be r11,r13,380 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 364:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 368:	21 81 00 01 	andi r1,r12,0x1
 36c:	44 20 ff fc 	be r1,r0,35c <irq_handler+0x28>
 370:	29 61 00 00 	lw r1,(r11+0)
 374:	35 6b 00 04 	addi r11,r11,4
 378:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 37c:	5d 6d ff fa 	bne r11,r13,364 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 380:	2b 9d 00 04 	lw ra,(sp+4)
 384:	2b 8b 00 10 	lw r11,(sp+16)
 388:	2b 8c 00 0c 	lw r12,(sp+12)
 38c:	2b 8d 00 08 	lw r13,(sp+8)
 390:	37 9c 00 10 	addi sp,sp,16
 394:	c3 a0 00 00 	ret

00000398 <isr_init>:

void isr_init()
{
 398:	78 01 00 00 	mvhi r1,0x0
 39c:	78 02 00 00 	mvhi r2,0x0
 3a0:	38 21 08 1c 	ori r1,r1,0x81c
 3a4:	38 42 03 04 	ori r2,r2,0x304
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 3a8:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3ac:	58 22 00 00 	sw (r1+0),r2
 3b0:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 3b4:	5c 23 ff fe 	bne r1,r3,3ac <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 3b8:	c3 a0 00 00 	ret

000003bc <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3bc:	78 03 00 00 	mvhi r3,0x0
 3c0:	3c 21 00 02 	sli r1,r1,2
 3c4:	38 63 08 1c 	ori r3,r3,0x81c
 3c8:	b4 61 18 00 	add r3,r3,r1
 3cc:	58 62 00 00 	sw (r3+0),r2
}
 3d0:	c3 a0 00 00 	ret

000003d4 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 3d4:	78 03 00 00 	mvhi r3,0x0
 3d8:	3c 21 00 02 	sli r1,r1,2
 3dc:	38 63 08 1c 	ori r3,r3,0x81c
 3e0:	78 02 00 00 	mvhi r2,0x0
 3e4:	b4 61 18 00 	add r3,r3,r1
 3e8:	38 42 03 04 	ori r2,r2,0x304
 3ec:	58 62 00 00 	sw (r3+0),r2
}
 3f0:	c3 a0 00 00 	ret

000003f4 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3f4:	78 04 00 00 	mvhi r4,0x0
 3f8:	38 84 07 ac 	ori r4,r4,0x7ac
 3fc:	28 83 00 00 	lw r3,(r4+0)
 400:	78 02 00 00 	mvhi r2,0x0
 404:	38 42 08 14 	ori r2,r2,0x814
 408:	28 42 00 00 	lw r2,(r2+0)
 40c:	88 23 08 00 	mul r1,r1,r3
 410:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 414:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 418:	34 01 00 08 	mvi r1,8
 41c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 420:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 424:	20 21 00 01 	andi r1,r1,0x1
 428:	44 20 ff fe 	be r1,r0,420 <msleep+0x2c>
}
 42c:	c3 a0 00 00 	ret

00000430 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 430:	78 02 00 00 	mvhi r2,0x0
 434:	38 42 08 14 	ori r2,r2,0x814
 438:	28 42 00 00 	lw r2,(r2+0)
 43c:	08 21 00 64 	muli r1,r1,100
 440:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 444:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 448:	34 01 00 08 	mvi r1,8
 44c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 450:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 454:	20 21 00 01 	andi r1,r1,0x1
 458:	44 20 ff fe 	be r1,r0,450 <nsleep+0x20>
}
 45c:	c3 a0 00 00 	ret

00000460 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 460:	78 01 00 00 	mvhi r1,0x0
 464:	38 21 08 14 	ori r1,r1,0x814
 468:	28 23 00 00 	lw r3,(r1+0)
 46c:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 470:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 474:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 478:	38 21 08 9c 	ori r1,r1,0x89c

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 47c:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 480:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 484:	78 02 00 00 	mvhi r2,0x0
 488:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 48c:	34 04 00 0e 	mvi r4,14
 490:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 494:	38 21 08 1c 	ori r1,r1,0x81c
 498:	38 42 03 08 	ori r2,r2,0x308
 49c:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4a0:	c3 a0 00 00 	ret

000004a4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4a4:	c3 a0 00 00 	ret

000004a8 <uart_getchar>:

char uart_getchar()
{   
 4a8:	78 01 00 00 	mvhi r1,0x0
 4ac:	38 21 08 0c 	ori r1,r1,0x80c
 4b0:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 4b4:	28 41 00 00 	lw r1,(r2+0)
 4b8:	20 21 00 01 	andi r1,r1,0x1
 4bc:	44 20 ff fe 	be r1,r0,4b4 <uart_getchar+0xc>
	return uart0->rxtx;
 4c0:	28 41 00 04 	lw r1,(r2+4)
}
 4c4:	20 21 00 ff 	andi r1,r1,0xff
 4c8:	c3 a0 00 00 	ret

000004cc <uart_putchar>:

void uart_putchar(char c)
{
 4cc:	78 02 00 00 	mvhi r2,0x0
 4d0:	38 42 08 0c 	ori r2,r2,0x80c
 4d4:	28 43 00 00 	lw r3,(r2+0)
 4d8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4dc:	28 62 00 00 	lw r2,(r3+0)
 4e0:	20 42 00 10 	andi r2,r2,0x10
 4e4:	5c 40 ff fe 	bne r2,r0,4dc <uart_putchar+0x10>
	uart0->rxtx = c;
 4e8:	58 61 00 04 	sw (r3+4),r1
}
 4ec:	c3 a0 00 00 	ret

000004f0 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4f0:	40 24 00 00 	lbu r4,(r1+0)
 4f4:	44 80 00 0b 	be r4,r0,520 <uart_putstr+0x30>
 4f8:	78 02 00 00 	mvhi r2,0x0
 4fc:	38 42 08 0c 	ori r2,r2,0x80c
 500:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 504:	28 62 00 00 	lw r2,(r3+0)
 508:	20 42 00 10 	andi r2,r2,0x10
 50c:	5c 40 ff fe 	bne r2,r0,504 <uart_putstr+0x14>
	uart0->rxtx = c;
 510:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 514:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 518:	40 24 00 00 	lbu r4,(r1+0)
 51c:	5c 82 ff fa 	bne r4,r2,504 <uart_putstr+0x14>
 520:	c3 a0 00 00 	ret

00000524 <uart_init1>:
	//uart1->lcr = 0x03;  // Line Control Register:    8N1
	//uart1->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart1->div = (FCPU/(57600*16));
}
 524:	c3 a0 00 00 	ret

00000528 <uart_getchar1>:

char uart_getchar1()
{   
 528:	78 01 00 00 	mvhi r1,0x0
 52c:	38 21 08 10 	ori r1,r1,0x810
 530:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 534:	28 41 00 00 	lw r1,(r2+0)
 538:	20 21 00 01 	andi r1,r1,0x1
 53c:	44 20 ff fe 	be r1,r0,534 <uart_getchar1+0xc>
	return uart1->rxtx;
 540:	28 41 00 04 	lw r1,(r2+4)
}
 544:	20 21 00 ff 	andi r1,r1,0xff
 548:	c3 a0 00 00 	ret

0000054c <uart_putchar1>:

void uart_putchar1(char c)
{
 54c:	78 02 00 00 	mvhi r2,0x0
 550:	38 42 08 10 	ori r2,r2,0x810
 554:	28 43 00 00 	lw r3,(r2+0)
 558:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 55c:	28 62 00 00 	lw r2,(r3+0)
 560:	20 42 00 10 	andi r2,r2,0x10
 564:	5c 40 ff fe 	bne r2,r0,55c <uart_putchar1+0x10>
	uart1->rxtx = c;
 568:	58 61 00 04 	sw (r3+4),r1
}
 56c:	c3 a0 00 00 	ret

00000570 <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 570:	40 24 00 00 	lbu r4,(r1+0)
 574:	44 80 00 0b 	be r4,r0,5a0 <uart_putstr1+0x30>
 578:	78 02 00 00 	mvhi r2,0x0
 57c:	38 42 08 10 	ori r2,r2,0x810
 580:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 584:	28 62 00 00 	lw r2,(r3+0)
 588:	20 42 00 10 	andi r2,r2,0x10
 58c:	5c 40 ff fe 	bne r2,r0,584 <uart_putstr1+0x14>
	uart1->rxtx = c;
 590:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 594:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 598:	40 24 00 00 	lbu r4,(r1+0)
 59c:	5c 82 ff fa 	bne r4,r2,584 <uart_putstr1+0x14>
 5a0:	c3 a0 00 00 	ret

000005a4 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 5a4:	37 9c ff f8 	addi sp,sp,-8
 5a8:	5b 8b 00 08 	sw (sp+8),r11
 5ac:	5b 9d 00 04 	sw (sp+4),ra
	//nsleep(2016300);
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
		//c = ok();
		nsleep(2016300);
 5b0:	78 01 00 00 	mvhi r1,0x0
 5b4:	38 21 07 b0 	ori r1,r1,0x7b0
 5b8:	28 2b 00 00 	lw r11,(r1+0)
void init_wifi(){ //configurar el modulo como estación con puerto 80
	//uart_putstr1("AT+RST\r\n");
	//nsleep(2016300);
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
 5bc:	78 01 00 00 	mvhi r1,0x0
 5c0:	38 21 07 b4 	ori r1,r1,0x7b4
 5c4:	fb ff ff eb 	calli 570 <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 5c8:	b9 60 08 00 	mv r1,r11
 5cc:	fb ff ff 99 	calli 430 <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPMODE=1\r\n");
 5d0:	78 01 00 00 	mvhi r1,0x0
 5d4:	38 21 07 c4 	ori r1,r1,0x7c4
 5d8:	fb ff ff e6 	calli 570 <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 5dc:	b9 60 08 00 	mv r1,r11
 5e0:	fb ff ff 94 	calli 430 <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPSTART=\"TCP\",\"192.168.4.2\",1234\r\n");
 5e4:	78 01 00 00 	mvhi r1,0x0
 5e8:	38 21 07 d4 	ori r1,r1,0x7d4
 5ec:	fb ff ff e1 	calli 570 <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 5f0:	b9 60 08 00 	mv r1,r11
 5f4:	fb ff ff 8f 	calli 430 <nsleep>
		uart_putstr1("AT+CIPSEND\r\n");
 5f8:	78 01 00 00 	mvhi r1,0x0
 5fc:	38 21 07 fc 	ori r1,r1,0x7fc
 600:	fb ff ff dc 	calli 570 <uart_putstr1>
		nsleep(2016300);
 604:	b9 60 08 00 	mv r1,r11
 608:	fb ff ff 8a 	calli 430 <nsleep>
	//}
}
 60c:	2b 9d 00 04 	lw ra,(sp+4)
 610:	2b 8b 00 08 	lw r11,(sp+8)
 614:	37 9c 00 08 	addi sp,sp,8
 618:	c3 a0 00 00 	ret

0000061c <wifi_putchar>:

void wifi_putchar(char a){
 61c:	78 02 00 00 	mvhi r2,0x0
 620:	38 42 08 10 	ori r2,r2,0x810
 624:	28 43 00 00 	lw r3,(r2+0)
 628:	20 21 00 ff 	andi r1,r1,0xff
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 62c:	28 62 00 00 	lw r2,(r3+0)
 630:	20 42 00 10 	andi r2,r2,0x10
 634:	5c 40 ff fe 	bne r2,r0,62c <wifi_putchar+0x10>
	uart1->rxtx = c;
 638:	58 61 00 04 	sw (r3+4),r1
	//int c = 0; 	  
	//while(c == 0){
		uart_putchar1(a);
		//c = ok();
	//}
}
 63c:	c3 a0 00 00 	ret

00000640 <wifi_getchar>:
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 640:	78 01 00 00 	mvhi r1,0x0
 644:	38 21 08 10 	ori r1,r1,0x810
 648:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 64c:	34 03 00 00 	mvi r3,0
		c = uart_getchar1();
		if (c ==':'){
 650:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 654:	34 05 00 14 	mvi r5,20
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 658:	28 41 00 00 	lw r1,(r2+0)
 65c:	20 21 00 01 	andi r1,r1,0x1
 660:	44 20 ff fe 	be r1,r0,658 <wifi_getchar+0x18>
	return uart1->rxtx;
 664:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 668:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar1();
		if (c ==':'){
 66c:	20 21 00 ff 	andi r1,r1,0xff
 670:	44 24 00 04 	be r1,r4,680 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 674:	5c 65 ff f9 	bne r3,r5,658 <wifi_getchar+0x18>
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 678:	34 01 00 0a 	mvi r1,10

}
 67c:	c3 a0 00 00 	ret
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 680:	28 41 00 00 	lw r1,(r2+0)
 684:	20 21 00 01 	andi r1,r1,0x1
 688:	44 20 ff fe 	be r1,r0,680 <wifi_getchar+0x40>
	return uart1->rxtx;
 68c:	28 41 00 04 	lw r1,(r2+4)
 690:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar1();
		if (c ==':'){
			c = uart_getchar1();
			return c;
 694:	c3 a0 00 00 	ret

00000698 <ok>:
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 698:	78 01 00 00 	mvhi r1,0x0
 69c:	38 21 08 10 	ori r1,r1,0x810
 6a0:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 6a4:	34 03 00 00 	mvi r3,0
		a=uart_getchar1();
		if(a=='K'){
 6a8:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 6ac:	34 05 00 1e 	mvi r5,30
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 6b0:	28 41 00 00 	lw r1,(r2+0)
 6b4:	20 21 00 01 	andi r1,r1,0x1
 6b8:	44 20 ff fe 	be r1,r0,6b0 <ok+0x18>
	return uart1->rxtx;
 6bc:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 6c0:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar1();
		if(a=='K'){
 6c4:	20 21 00 ff 	andi r1,r1,0xff
 6c8:	44 24 00 04 	be r1,r4,6d8 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 6cc:	5c 65 ff f9 	bne r3,r5,6b0 <ok+0x18>
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 6d0:	34 01 00 00 	mvi r1,0
 6d4:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar1();
		if(a=='K'){
			return 1;
 6d8:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 6dc:	c3 a0 00 00 	ret

000006e0 <ReadChanel>:
Stop"BOTH"
ByteReaded"READ"
ByteToWrite"WRITE
*/

void ReadChanel(char ch){
 6e0:	20 21 00 ff 	andi r1,r1,0xff
	switch(ch){
 6e4:	34 02 00 01 	mvi r2,1
 6e8:	44 22 00 1f 	be r1,r2,764 <ReadChanel+0x84>
 6ec:	5c 20 00 0e 	bne r1,r0,724 <ReadChanel+0x44>
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
	   break;
	   default:
		i2c0->ByteConfigurationOne=0xC3;
 6f0:	78 01 00 00 	mvhi r1,0x0
 6f4:	38 21 08 18 	ori r1,r1,0x818
 6f8:	28 21 00 00 	lw r1,(r1+0)
 6fc:	34 02 00 c3 	mvi r2,195
 700:	58 22 00 0c 	sw (r1+12),r2
	   break;
	}
	i2c0->ByteConfigurationTwo=0X83;//FS 4.096 volts although this is more than electrical especifications,there never be more than 3.6
 704:	34 02 00 83 	mvi r2,131
 708:	58 22 00 10 	sw (r1+16),r2
	i2c0->Start=0x01;
 70c:	34 02 00 01 	mvi r2,1
 710:	58 22 00 14 	sw (r1+20),r2
	while((i2c0->Busy)==0x01);
 714:	34 03 00 01 	mvi r3,1
 718:	28 22 00 00 	lw r2,(r1+0)
 71c:	44 43 ff ff 	be r2,r3,718 <ReadChanel+0x38>
}
 720:	c3 a0 00 00 	ret
ByteReaded"READ"
ByteToWrite"WRITE
*/

void ReadChanel(char ch){
	switch(ch){
 724:	34 02 00 02 	mvi r2,2
 728:	44 22 00 09 	be r1,r2,74c <ReadChanel+0x6c>
 72c:	34 02 00 03 	mvi r2,3
 730:	5c 22 ff f0 	bne r1,r2,6f0 <ReadChanel+0x10>
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
	   break;
	   case 0x03:
		i2c0->ByteConfigurationOne=0xF3;
 734:	78 01 00 00 	mvhi r1,0x0
 738:	38 21 08 18 	ori r1,r1,0x818
 73c:	28 21 00 00 	lw r1,(r1+0)
 740:	34 02 00 f3 	mvi r2,243
 744:	58 22 00 0c 	sw (r1+12),r2
	   break;
 748:	e3 ff ff ef 	bi 704 <ReadChanel+0x24>
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
	   break;
	   case 0x02:
		i2c0->ByteConfigurationOne=0xE3;
 74c:	78 01 00 00 	mvhi r1,0x0
 750:	38 21 08 18 	ori r1,r1,0x818
 754:	28 21 00 00 	lw r1,(r1+0)
 758:	34 02 00 e3 	mvi r2,227
 75c:	58 22 00 0c 	sw (r1+12),r2
	   break;
 760:	e3 ff ff e9 	bi 704 <ReadChanel+0x24>
	switch(ch){
	   case 0x00:
		i2c0->ByteConfigurationOne=0xC3;
	   break;
	   case 0x01:
		i2c0->ByteConfigurationOne=0xD3;
 764:	78 01 00 00 	mvhi r1,0x0
 768:	38 21 08 18 	ori r1,r1,0x818
 76c:	28 21 00 00 	lw r1,(r1+0)
 770:	34 02 00 d3 	mvi r2,211
 774:	58 22 00 0c 	sw (r1+12),r2
	   break;
 778:	e3 ff ff e3 	bi 704 <ReadChanel+0x24>

0000077c <GetByteOne>:
	while((i2c0->Busy)==0x01);
}


char GetByteOne(){
	return i2c0->ByteReadedOne;
 77c:	78 01 00 00 	mvhi r1,0x0
 780:	38 21 08 18 	ori r1,r1,0x818
 784:	28 21 00 00 	lw r1,(r1+0)
 788:	28 21 00 04 	lw r1,(r1+4)
}
 78c:	20 21 00 ff 	andi r1,r1,0xff
 790:	c3 a0 00 00 	ret

00000794 <GetByteTwo>:
char GetByteTwo()
{
	return i2c0->ByteReadedTwo;
 794:	78 01 00 00 	mvhi r1,0x0
 798:	38 21 08 18 	ori r1,r1,0x818
 79c:	28 21 00 00 	lw r1,(r1+0)
 7a0:	28 21 00 08 	lw r1,(r1+8)
}
 7a4:	20 21 00 ff 	andi r1,r1,0xff
 7a8:	c3 a0 00 00 	ret
