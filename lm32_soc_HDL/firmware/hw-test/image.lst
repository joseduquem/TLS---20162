
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000079c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000060  0000079c  0000079c  000007f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000007fc  000007fc  00000850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000810  00000810  00000864  2**2
                  ALLOC
  4 .debug_abbrev 000002ee  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000900  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000061f  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  00001a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000025c  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001f3  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000076  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002109  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000002a3  00000000  00000000  00002149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000060  00000000  00000000  000023fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 75 	calli 2a0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 10 	ori gp,gp,0x810
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 10 	ori r1,r1,0x810
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 94 	ori r3,r3,0x894

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
 * 
 */

#include "soc-hw.h"

int  main(){
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	78 0c 00 00 	mvhi r12,0x0
		nsleep(3016300);
		a++;
	}
	*/	

	init_wifi();
 220:	f8 00 00 bc 	calli 510 <init_wifi>
 224:	34 0b 00 00 	mvi r11,0
 228:	39 8c 07 c0 	ori r12,r12,0x7c0
	char i=0;
	char a=0x30;
	for(i; i<=9; i++) {
 22c:	34 0d 00 0a 	mvi r13,10
		wifi_putchar(a);
 230:	35 61 00 30 	addi r1,r11,48
 234:	f8 00 00 d7 	calli 590 <wifi_putchar>
		uart_putstr1("\r\n");
 238:	b9 80 08 00 	mv r1,r12
 23c:	f8 00 00 a8 	calli 4dc <uart_putstr1>
		nsleep(2016300);
 240:	78 02 00 00 	mvhi r2,0x0
 244:	38 42 07 9c 	ori r2,r2,0x79c
 248:	28 41 00 00 	lw r1,(r2+0)
 24c:	35 6b 00 01 	addi r11,r11,1
 250:	f8 00 00 53 	calli 39c <nsleep>
	*/	

	init_wifi();
	char i=0;
	char a=0x30;
	for(i; i<=9; i++) {
 254:	5d 6d ff f7 	bne r11,r13,230 <main+0x28>
		uart_putstr1("\r\n");
		nsleep(2016300);
		a++;
	}
	
}
 258:	2b 9d 00 04 	lw ra,(sp+4)
 25c:	2b 8b 00 10 	lw r11,(sp+16)
 260:	2b 8c 00 0c 	lw r12,(sp+12)
 264:	2b 8d 00 08 	lw r13,(sp+8)
 268:	37 9c 00 10 	addi sp,sp,16
 26c:	c3 a0 00 00 	ret

00000270 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 270:	c3 a0 00 00 	ret

00000274 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 274:	78 01 00 00 	mvhi r1,0x0
 278:	38 21 08 90 	ori r1,r1,0x890
 27c:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 280:	78 02 00 00 	mvhi r2,0x0
 284:	38 42 08 00 	ori r2,r2,0x800
 288:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 28c:	34 63 00 01 	addi r3,r3,1
 290:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 294:	34 01 00 0e 	mvi r1,14
 298:	58 41 00 00 	sw (r2+0),r1
}
 29c:	c3 a0 00 00 	ret

000002a0 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2a0:	37 9c ff f0 	addi sp,sp,-16
 2a4:	5b 8b 00 10 	sw (sp+16),r11
 2a8:	5b 8c 00 0c 	sw (sp+12),r12
 2ac:	5b 8d 00 08 	sw (sp+8),r13
 2b0:	5b 9d 00 04 	sw (sp+4),ra
 2b4:	78 0b 00 00 	mvhi r11,0x0
 2b8:	39 6b 08 10 	ori r11,r11,0x810
 2bc:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2c0:	35 6d 00 80 	addi r13,r11,128
 2c4:	e0 00 00 04 	bi 2d4 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2c8:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2cc:	45 6d 00 08 	be r11,r13,2ec <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 2d0:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2d4:	21 81 00 01 	andi r1,r12,0x1
 2d8:	44 20 ff fc 	be r1,r0,2c8 <irq_handler+0x28>
 2dc:	29 61 00 00 	lw r1,(r11+0)
 2e0:	35 6b 00 04 	addi r11,r11,4
 2e4:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2e8:	5d 6d ff fa 	bne r11,r13,2d0 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 2ec:	2b 9d 00 04 	lw ra,(sp+4)
 2f0:	2b 8b 00 10 	lw r11,(sp+16)
 2f4:	2b 8c 00 0c 	lw r12,(sp+12)
 2f8:	2b 8d 00 08 	lw r13,(sp+8)
 2fc:	37 9c 00 10 	addi sp,sp,16
 300:	c3 a0 00 00 	ret

00000304 <isr_init>:

void isr_init()
{
 304:	78 01 00 00 	mvhi r1,0x0
 308:	78 02 00 00 	mvhi r2,0x0
 30c:	38 21 08 10 	ori r1,r1,0x810
 310:	38 42 02 70 	ori r2,r2,0x270
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 314:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 318:	58 22 00 00 	sw (r1+0),r2
 31c:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 320:	5c 23 ff fe 	bne r1,r3,318 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 324:	c3 a0 00 00 	ret

00000328 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 328:	78 03 00 00 	mvhi r3,0x0
 32c:	3c 21 00 02 	sli r1,r1,2
 330:	38 63 08 10 	ori r3,r3,0x810
 334:	b4 61 18 00 	add r3,r3,r1
 338:	58 62 00 00 	sw (r3+0),r2
}
 33c:	c3 a0 00 00 	ret

00000340 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 340:	78 03 00 00 	mvhi r3,0x0
 344:	3c 21 00 02 	sli r1,r1,2
 348:	38 63 08 10 	ori r3,r3,0x810
 34c:	78 02 00 00 	mvhi r2,0x0
 350:	b4 61 18 00 	add r3,r3,r1
 354:	38 42 02 70 	ori r2,r2,0x270
 358:	58 62 00 00 	sw (r3+0),r2
}
 35c:	c3 a0 00 00 	ret

00000360 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 360:	78 04 00 00 	mvhi r4,0x0
 364:	38 84 07 a0 	ori r4,r4,0x7a0
 368:	28 83 00 00 	lw r3,(r4+0)
 36c:	78 02 00 00 	mvhi r2,0x0
 370:	38 42 08 00 	ori r2,r2,0x800
 374:	28 42 00 00 	lw r2,(r2+0)
 378:	88 23 08 00 	mul r1,r1,r3
 37c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 380:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 384:	34 01 00 08 	mvi r1,8
 388:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 38c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 390:	20 21 00 01 	andi r1,r1,0x1
 394:	44 20 ff fe 	be r1,r0,38c <msleep+0x2c>
}
 398:	c3 a0 00 00 	ret

0000039c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 39c:	78 02 00 00 	mvhi r2,0x0
 3a0:	38 42 08 00 	ori r2,r2,0x800
 3a4:	28 42 00 00 	lw r2,(r2+0)
 3a8:	08 21 00 64 	muli r1,r1,100
 3ac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3b0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3b4:	34 01 00 08 	mvi r1,8
 3b8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3bc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3c0:	20 21 00 01 	andi r1,r1,0x1
 3c4:	44 20 ff fe 	be r1,r0,3bc <nsleep+0x20>
}
 3c8:	c3 a0 00 00 	ret

000003cc <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3cc:	78 01 00 00 	mvhi r1,0x0
 3d0:	38 21 08 00 	ori r1,r1,0x800
 3d4:	28 23 00 00 	lw r3,(r1+0)
 3d8:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3dc:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3e0:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3e4:	38 21 08 90 	ori r1,r1,0x890

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 3e8:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3ec:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3f0:	78 02 00 00 	mvhi r2,0x0
 3f4:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3f8:	34 04 00 0e 	mvi r4,14
 3fc:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 400:	38 21 08 10 	ori r1,r1,0x810
 404:	38 42 02 74 	ori r2,r2,0x274
 408:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 40c:	c3 a0 00 00 	ret

00000410 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 410:	c3 a0 00 00 	ret

00000414 <uart_getchar>:

char uart_getchar()
{   
 414:	78 01 00 00 	mvhi r1,0x0
 418:	38 21 07 fc 	ori r1,r1,0x7fc
 41c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 420:	28 41 00 00 	lw r1,(r2+0)
 424:	20 21 00 01 	andi r1,r1,0x1
 428:	44 20 ff fe 	be r1,r0,420 <uart_getchar+0xc>
	return uart0->rxtx;
 42c:	28 41 00 04 	lw r1,(r2+4)
}
 430:	20 21 00 ff 	andi r1,r1,0xff
 434:	c3 a0 00 00 	ret

00000438 <uart_putchar>:

void uart_putchar(char c)
{
 438:	78 02 00 00 	mvhi r2,0x0
 43c:	38 42 07 fc 	ori r2,r2,0x7fc
 440:	28 43 00 00 	lw r3,(r2+0)
 444:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 448:	28 62 00 00 	lw r2,(r3+0)
 44c:	20 42 00 10 	andi r2,r2,0x10
 450:	5c 40 ff fe 	bne r2,r0,448 <uart_putchar+0x10>
	uart0->rxtx = c;
 454:	58 61 00 04 	sw (r3+4),r1
}
 458:	c3 a0 00 00 	ret

0000045c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 45c:	40 24 00 00 	lbu r4,(r1+0)
 460:	44 80 00 0b 	be r4,r0,48c <uart_putstr+0x30>
 464:	78 02 00 00 	mvhi r2,0x0
 468:	38 42 07 fc 	ori r2,r2,0x7fc
 46c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 470:	28 62 00 00 	lw r2,(r3+0)
 474:	20 42 00 10 	andi r2,r2,0x10
 478:	5c 40 ff fe 	bne r2,r0,470 <uart_putstr+0x14>
	uart0->rxtx = c;
 47c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 480:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 484:	40 24 00 00 	lbu r4,(r1+0)
 488:	5c 82 ff fa 	bne r4,r2,470 <uart_putstr+0x14>
 48c:	c3 a0 00 00 	ret

00000490 <uart_init1>:
	//uart1->lcr = 0x03;  // Line Control Register:    8N1
	//uart1->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart1->div = (FCPU/(57600*16));
}
 490:	c3 a0 00 00 	ret

00000494 <uart_getchar1>:

char uart_getchar1()
{   
 494:	78 01 00 00 	mvhi r1,0x0
 498:	38 21 08 0c 	ori r1,r1,0x80c
 49c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 4a0:	28 41 00 00 	lw r1,(r2+0)
 4a4:	20 21 00 01 	andi r1,r1,0x1
 4a8:	44 20 ff fe 	be r1,r0,4a0 <uart_getchar1+0xc>
	return uart1->rxtx;
 4ac:	28 41 00 04 	lw r1,(r2+4)
}
 4b0:	20 21 00 ff 	andi r1,r1,0xff
 4b4:	c3 a0 00 00 	ret

000004b8 <uart_putchar1>:

void uart_putchar1(char c)
{
 4b8:	78 02 00 00 	mvhi r2,0x0
 4bc:	38 42 08 0c 	ori r2,r2,0x80c
 4c0:	28 43 00 00 	lw r3,(r2+0)
 4c4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 4c8:	28 62 00 00 	lw r2,(r3+0)
 4cc:	20 42 00 10 	andi r2,r2,0x10
 4d0:	5c 40 ff fe 	bne r2,r0,4c8 <uart_putchar1+0x10>
	uart1->rxtx = c;
 4d4:	58 61 00 04 	sw (r3+4),r1
}
 4d8:	c3 a0 00 00 	ret

000004dc <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 4dc:	40 24 00 00 	lbu r4,(r1+0)
 4e0:	44 80 00 0b 	be r4,r0,50c <uart_putstr1+0x30>
 4e4:	78 02 00 00 	mvhi r2,0x0
 4e8:	38 42 08 0c 	ori r2,r2,0x80c
 4ec:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 4f0:	28 62 00 00 	lw r2,(r3+0)
 4f4:	20 42 00 10 	andi r2,r2,0x10
 4f8:	5c 40 ff fe 	bne r2,r0,4f0 <uart_putstr1+0x14>
	uart1->rxtx = c;
 4fc:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 500:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 504:	40 24 00 00 	lbu r4,(r1+0)
 508:	5c 82 ff fa 	bne r4,r2,4f0 <uart_putstr1+0x14>
 50c:	c3 a0 00 00 	ret

00000510 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 510:	37 9c ff f8 	addi sp,sp,-8
 514:	5b 8b 00 08 	sw (sp+8),r11
 518:	5b 9d 00 04 	sw (sp+4),ra
	//uart_putstr1("AT+RST\r\n");
	nsleep(2016300);
 51c:	78 01 00 00 	mvhi r1,0x0
 520:	38 21 07 9c 	ori r1,r1,0x79c
 524:	28 2b 00 00 	lw r11,(r1+0)
 528:	b9 60 08 00 	mv r1,r11
 52c:	fb ff ff 9c 	calli 39c <nsleep>
	//int c = 0;
	//while(c==0){
		uart_putstr1("AT+CIPMUX=0\r\n");
 530:	78 01 00 00 	mvhi r1,0x0
 534:	38 21 07 a4 	ori r1,r1,0x7a4
 538:	fb ff ff e9 	calli 4dc <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 53c:	b9 60 08 00 	mv r1,r11
 540:	fb ff ff 97 	calli 39c <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPMODE=1\r\n");
 544:	78 01 00 00 	mvhi r1,0x0
 548:	38 21 07 b4 	ori r1,r1,0x7b4
 54c:	fb ff ff e4 	calli 4dc <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 550:	b9 60 08 00 	mv r1,r11
 554:	fb ff ff 92 	calli 39c <nsleep>
	//}
	//c = 0;
	//while (c==0){
		uart_putstr1("AT+CIPSTART=\"TCP\",\"192.168.4.2\",80\r\n");
 558:	78 01 00 00 	mvhi r1,0x0
 55c:	38 21 07 c4 	ori r1,r1,0x7c4
 560:	fb ff ff df 	calli 4dc <uart_putstr1>
		//c = ok();
		nsleep(2016300);
 564:	b9 60 08 00 	mv r1,r11
 568:	fb ff ff 8d 	calli 39c <nsleep>
		uart_putstr1("AT+CIPSEND\r\n");
 56c:	78 01 00 00 	mvhi r1,0x0
 570:	38 21 07 ec 	ori r1,r1,0x7ec
 574:	fb ff ff da 	calli 4dc <uart_putstr1>
		nsleep(2016300);
 578:	b9 60 08 00 	mv r1,r11
 57c:	fb ff ff 88 	calli 39c <nsleep>
	//}
}
 580:	2b 9d 00 04 	lw ra,(sp+4)
 584:	2b 8b 00 08 	lw r11,(sp+8)
 588:	37 9c 00 08 	addi sp,sp,8
 58c:	c3 a0 00 00 	ret

00000590 <wifi_putchar>:

void wifi_putchar(char a){
 590:	78 02 00 00 	mvhi r2,0x0
 594:	38 42 08 0c 	ori r2,r2,0x80c
 598:	28 43 00 00 	lw r3,(r2+0)
 59c:	20 21 00 ff 	andi r1,r1,0xff
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 5a0:	28 62 00 00 	lw r2,(r3+0)
 5a4:	20 42 00 10 	andi r2,r2,0x10
 5a8:	5c 40 ff fe 	bne r2,r0,5a0 <wifi_putchar+0x10>
	uart1->rxtx = c;
 5ac:	58 61 00 04 	sw (r3+4),r1
	//int c = 0; 	  
	//while(c == 0){
		uart_putchar1(a);
		//c = ok();
	//}
}
 5b0:	c3 a0 00 00 	ret

000005b4 <wifi_getchar>:
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 5b4:	78 01 00 00 	mvhi r1,0x0
 5b8:	38 21 08 0c 	ori r1,r1,0x80c
 5bc:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5c0:	34 03 00 00 	mvi r3,0
		c = uart_getchar1();
		if (c ==':'){
 5c4:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5c8:	34 05 00 14 	mvi r5,20
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 5cc:	28 41 00 00 	lw r1,(r2+0)
 5d0:	20 21 00 01 	andi r1,r1,0x1
 5d4:	44 20 ff fe 	be r1,r0,5cc <wifi_getchar+0x18>
	return uart1->rxtx;
 5d8:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5dc:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar1();
		if (c ==':'){
 5e0:	20 21 00 ff 	andi r1,r1,0xff
 5e4:	44 24 00 04 	be r1,r4,5f4 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5e8:	5c 65 ff f9 	bne r3,r5,5cc <wifi_getchar+0x18>
			c = uart_getchar1();
			return c;
			break;
		}
	}
	return '\n';
 5ec:	34 01 00 0a 	mvi r1,10

}
 5f0:	c3 a0 00 00 	ret
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 5f4:	28 41 00 00 	lw r1,(r2+0)
 5f8:	20 21 00 01 	andi r1,r1,0x1
 5fc:	44 20 ff fe 	be r1,r0,5f4 <wifi_getchar+0x40>
	return uart1->rxtx;
 600:	28 41 00 04 	lw r1,(r2+4)
 604:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar1();
		if (c ==':'){
			c = uart_getchar1();
			return c;
 608:	c3 a0 00 00 	ret

0000060c <ok>:
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 60c:	78 01 00 00 	mvhi r1,0x0
 610:	38 21 08 0c 	ori r1,r1,0x80c
 614:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 618:	34 03 00 00 	mvi r3,0
		a=uart_getchar1();
		if(a=='K'){
 61c:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 620:	34 05 00 1e 	mvi r5,30
	//uart1->div = (FCPU/(57600*16));
}

char uart_getchar1()
{   
	while (! (uart1->ucr & UART_DR)) ;
 624:	28 41 00 00 	lw r1,(r2+0)
 628:	20 21 00 01 	andi r1,r1,0x1
 62c:	44 20 ff fe 	be r1,r0,624 <ok+0x18>
	return uart1->rxtx;
 630:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 634:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar1();
		if(a=='K'){
 638:	20 21 00 ff 	andi r1,r1,0xff
 63c:	44 24 00 04 	be r1,r4,64c <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 640:	5c 65 ff f9 	bne r3,r5,624 <ok+0x18>
		a=uart_getchar1();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 644:	34 01 00 00 	mvi r1,0
 648:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar1();
		if(a=='K'){
			return 1;
 64c:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 650:	c3 a0 00 00 	ret

00000654 <start_Read>:
/******************************************************************************
 * i2c Functions
 */
void start_Read (int r)
{  
	i2c0->startRead = r;
 654:	78 02 00 00 	mvhi r2,0x0
 658:	38 42 08 08 	ori r2,r2,0x808
 65c:	28 42 00 00 	lw r2,(r2+0)
 660:	58 41 00 14 	sw (r2+20),r1
}
 664:	c3 a0 00 00 	ret

00000668 <start_Write>:

void start_Write (int w)
{  
	i2c0->startWrite = w;
 668:	78 02 00 00 	mvhi r2,0x0
 66c:	38 42 08 08 	ori r2,r2,0x808
 670:	28 42 00 00 	lw r2,(r2+0)
 674:	58 41 00 18 	sw (r2+24),r1
}
 678:	c3 a0 00 00 	ret

0000067c <rw>:

void rw(int data_rw)
{
	i2c0->rw = data_rw;
 67c:	78 02 00 00 	mvhi r2,0x0
 680:	38 42 08 08 	ori r2,r2,0x808
 684:	28 42 00 00 	lw r2,(r2+0)
 688:	58 41 00 0c 	sw (r2+12),r1
}
 68c:	c3 a0 00 00 	ret

00000690 <i2c_write>:

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 690:	37 9c ff ec 	addi sp,sp,-20
 694:	5b 8b 00 14 	sw (sp+20),r11
 698:	5b 8c 00 10 	sw (sp+16),r12
 69c:	5b 8d 00 0c 	sw (sp+12),r13
 6a0:	5b 8e 00 08 	sw (sp+8),r14
 6a4:	5b 9d 00 04 	sw (sp+4),ra
	i2c0->startRead = r;
}

void start_Write (int w)
{  
	i2c0->startWrite = w;
 6a8:	78 0b 00 00 	mvhi r11,0x0
 6ac:	39 6b 08 08 	ori r11,r11,0x808
 6b0:	29 64 00 00 	lw r4,(r11+0)
{
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 6b4:	b8 20 68 00 	mv r13,r1
	start_Write(data);
	msleep(1);
 6b8:	34 01 00 01 	mvi r1,1
	i2c0->startRead = r;
}

void start_Write (int w)
{  
	i2c0->startWrite = w;
 6bc:	58 83 00 18 	sw (r4+24),r3
{
	i2c0->rw = data_rw;
}

void i2c_write (int dirI2C, int dirIntern, int data)
{		
 6c0:	b8 60 60 00 	mv r12,r3
 6c4:	b8 40 70 00 	mv r14,r2
	start_Write(data);
	msleep(1);
 6c8:	fb ff ff 26 	calli 360 <msleep>
	i2c0->startRead = r;
}

void start_Write (int w)
{  
	i2c0->startWrite = w;
 6cc:	29 64 00 00 	lw r4,(r11+0)
 6d0:	58 80 00 18 	sw (r4+24),r0
}

void rw(int data_rw)
{
	i2c0->rw = data_rw;
 6d4:	58 80 00 0c 	sw (r4+12),r0
{		
	start_Write(data);
	msleep(1);
	start_Write(0);
	rw(0); 
	while((i2c0->availWrite)==0x00);
 6d8:	28 85 00 04 	lw r5,(r4+4)
 6dc:	44 a0 ff ff 	be r5,r0,6d8 <i2c_write+0x48>
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	
 6e0:	3d c2 00 08 	sli r2,r14,8
 6e4:	3d a1 00 10 	sli r1,r13,16
 6e8:	b9 82 60 00 	or r12,r12,r2
 6ec:	b9 81 60 00 	or r12,r12,r1
 6f0:	58 8c 00 10 	sw (r4+16),r12

}
 6f4:	2b 9d 00 04 	lw ra,(sp+4)
 6f8:	2b 8b 00 14 	lw r11,(sp+20)
 6fc:	2b 8c 00 10 	lw r12,(sp+16)
 700:	2b 8d 00 0c 	lw r13,(sp+12)
 704:	2b 8e 00 08 	lw r14,(sp+8)
 708:	37 9c 00 14 	addi sp,sp,20
 70c:	c3 a0 00 00 	ret

00000710 <i2c_read>:

int8_t i2c_read (int dirI2C, int dirIntern){  
 710:	37 9c ff ec 	addi sp,sp,-20
 714:	5b 8b 00 14 	sw (sp+20),r11
 718:	5b 8c 00 10 	sw (sp+16),r12
 71c:	5b 8d 00 0c 	sw (sp+12),r13
 720:	5b 8e 00 08 	sw (sp+8),r14
 724:	5b 9d 00 04 	sw (sp+4),ra
/******************************************************************************
 * i2c Functions
 */
void start_Read (int r)
{  
	i2c0->startRead = r;
 728:	78 0b 00 00 	mvhi r11,0x0
 72c:	39 6b 08 08 	ori r11,r11,0x808
 730:	29 63 00 00 	lw r3,(r11+0)
 734:	34 0d 00 01 	mvi r13,1
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
 738:	b8 20 60 00 	mv r12,r1
/******************************************************************************
 * i2c Functions
 */
void start_Read (int r)
{  
	i2c0->startRead = r;
 73c:	58 6d 00 14 	sw (r3+20),r13

}

int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(1);
 740:	34 01 00 01 	mvi r1,1
	while((i2c0->availWrite)==0x00);
	i2c0->data = ((dirI2C<<16)|(dirIntern<<8)|data);	

}

int8_t i2c_read (int dirI2C, int dirIntern){  
 744:	b8 40 70 00 	mv r14,r2
	start_Read(1);
	msleep(1);
 748:	fb ff ff 06 	calli 360 <msleep>
/******************************************************************************
 * i2c Functions
 */
void start_Read (int r)
{  
	i2c0->startRead = r;
 74c:	29 63 00 00 	lw r3,(r11+0)
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(1);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
 750:	34 05 00 04 	mvi r5,4
/******************************************************************************
 * i2c Functions
 */
void start_Read (int r)
{  
	i2c0->startRead = r;
 754:	58 60 00 14 	sw (r3+20),r0
	i2c0->startWrite = w;
}

void rw(int data_rw)
{
	i2c0->rw = data_rw;
 758:	58 6d 00 0c 	sw (r3+12),r13
int8_t i2c_read (int dirI2C, int dirIntern){  
	start_Read(1);
	msleep(1);
	start_Read(0);
	rw(1);
	while((i2c0->availRead)==0x04);
 75c:	28 64 00 08 	lw r4,(r3+8)
 760:	44 85 ff ff 	be r4,r5,75c <i2c_read+0x4c>
	i2c0->data = ((dirI2C<<15)|(dirIntern<<7)|dirI2C);
 764:	3d 81 00 0f 	sli r1,r12,15
 768:	3d c2 00 07 	sli r2,r14,7
 76c:	b8 2c 60 00 	or r12,r1,r12
 770:	b9 82 60 00 	or r12,r12,r2
 774:	58 6c 00 10 	sw (r3+16),r12
	return i2c0->i2c_data_out;
 778:	28 61 00 00 	lw r1,(r3+0)
}
 77c:	b0 20 08 00 	sextb r1,r1
 780:	2b 9d 00 04 	lw ra,(sp+4)
 784:	2b 8b 00 14 	lw r11,(sp+20)
 788:	2b 8c 00 10 	lw r12,(sp+16)
 78c:	2b 8d 00 0c 	lw r13,(sp+12)
 790:	2b 8e 00 08 	lw r14,(sp+8)
 794:	37 9c 00 14 	addi sp,sp,20
 798:	c3 a0 00 00 	ret
